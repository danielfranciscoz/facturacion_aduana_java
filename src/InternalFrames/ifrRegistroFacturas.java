/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InternalFrames;

import Conexion.SessionHelper;
import Dialogos.dlgAnular;
import Dialogos.dlgExportarNotasDebito;
import Dialogos.dlgFacturar;
import Dialogos.dlgImprimirFactura;
import Dialogos.dlgNotaDebito;
import POJOs.Agencia;
import POJOs.Cliente;
import POJOs.Detallenotadebito;
import POJOs.Factura;
import POJOs.Notadebito;
import POJOs.Producto;
import POJOs.Registrosanulados;
import POJOs.Serviciosagencia;
import Utilidad.FormatoTabla;
import Utilidad.Mensajes;
import Utilidad.UtilDate;
import Utilidad.UtilTable;
import bean.ClienteBean;
import bean.DetalleNotaDebitoBean;
import bean.FacturasBean;
import bean.NotaDebitoBean;
import bean.ProductoBean;
import bean.RegistrosAnuladosBean;
import bean.ServicioAgenciaBean;
import bean.AgenciaBean;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Daniel-Zamora
 */
public class ifrRegistroFacturas extends javax.swing.JInternalFrame {

    private static FacturasBean facturasBean;
    private static ClienteBean clientesBean;
    private static ProductoBean productoBean;
    private static AgenciaBean agenciaBean;

    private static ServicioAgenciaBean servicioAgenciaBean;
    private static NotaDebitoBean notaDebitoBean;
    private static DetalleNotaDebitoBean detalleNotaDebitoBean;
    private static RegistrosAnuladosBean registrosAnuladosBean;

    private static List<Factura> facturas;
    private static List<ObjetoFila> filas;
    private static List<Notadebito> notasDebito;
    private static List<Detallenotadebito> detalleNotaDebito;
    private static List<Registrosanulados> registrosAnulados;

    public static boolean FirstRun;
    private static double FacturasIvasTotales, FacturasSubTotalesTotales;
    public static boolean RegistroFacturasActiva = false;

    /**
     * Creates new form ifrRegistroFacturas
     */
    public ifrRegistroFacturas() {

        facturasBean = new FacturasBean();
        clientesBean = new ClienteBean();
        productoBean = new ProductoBean();
        agenciaBean = new AgenciaBean();

        servicioAgenciaBean = new ServicioAgenciaBean();
        notaDebitoBean = new NotaDebitoBean();
        detalleNotaDebitoBean = new DetalleNotaDebitoBean();
        registrosAnuladosBean = new RegistrosAnuladosBean();

        FirstRun = true;
        FacturasIvasTotales = 0;
        FacturasSubTotalesTotales = 0;
        initComponents();

        jTable1.getSelectionModel()
                .addListSelectionListener((ListSelectionEvent e) -> {
                    jTable1SelectionChanged(e);
                });

        tblNotaDebitoC.getSelectionModel()
                .addListSelectionListener((ListSelectionEvent e) -> {
                    tblNotaDebitoCSelectionChanged(e);
                });

        RegistroFacturasActiva = true;

        SessionHelper.VerificarPermiso(btnNuevo, "gestion de facturas", "insertar");
        SessionHelper.VerificarPermiso(btnEditar, "gestion de facturas", "modificar");
        SessionHelper.VerificarPermiso(btnAnular, "gestion de facturas", "eliminar");
        SessionHelper.VerificarPermiso(btnImprimir, "gestion de facturas", "imprimir");
        SessionHelper.VerificarPermiso(btnExportar, "gestion de facturas", "exportar");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        lblCantidadRegistros = new javax.swing.JLabel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel13 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblDetallesMonto = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnNotaDebito = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btnAnular = new javax.swing.JButton();
        btnExportar = new javax.swing.JButton();
        btnExportar1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField6 = new javax.swing.JTextField();
        jPanel18 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        cboMesesFiltro = new javax.swing.JComboBox<>();
        cboAnioFiltro = new javax.swing.JComboBox<>();
        chkRangoFechas = new javax.swing.JCheckBox();
        jdcFechaInicio = new com.toedter.calendar.JDateChooser();
        jdcFechaFin = new com.toedter.calendar.JDateChooser();
        rtnVerAnual = new javax.swing.JCheckBox();
        rtnVerTodo = new javax.swing.JCheckBox();
        jButton6 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        chkExcluirAnuladas = new javax.swing.JCheckBox();
        chkExcluirPagadas = new javax.swing.JCheckBox();
        jPanel16 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblSubTotal = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblIVATotal = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtBuscarND = new javax.swing.JTextField();
        jPanel22 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        cboMesesFiltroND = new javax.swing.JComboBox<>();
        cboAnioFiltroND = new javax.swing.JComboBox<>();
        chkRangoFechasND = new javax.swing.JCheckBox();
        jdcFechaInicioND = new com.toedter.calendar.JDateChooser();
        jdcFechaFinND = new com.toedter.calendar.JDateChooser();
        rtnVerAnualND = new javax.swing.JCheckBox();
        rtnVerTodoND = new javax.swing.JCheckBox();
        actualizarND = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblNotaDebitoC = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setDividerSize(0);
        jSplitPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSplitPane1.setMinimumSize(new java.awt.Dimension(0, 0));
        jSplitPane1.setPreferredSize(new java.awt.Dimension(204, 109));

        jPanel4.setMinimumSize(new java.awt.Dimension(240, 240));
        jPanel4.setPreferredSize(new java.awt.Dimension(240, 240));
        jPanel4.setLayout(new java.awt.BorderLayout());

        lblCantidadRegistros.setFont(new java.awt.Font("Lucida Grande", 1, 9)); // NOI18N
        lblCantidadRegistros.setText("Cantidad de Registros: 0");
        lblCantidadRegistros.setPreferredSize(new java.awt.Dimension(165, 23));
        lblCantidadRegistros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblCantidadRegistrosMouseEntered(evt);
            }
        });
        jPanel12.add(lblCantidadRegistros);

        jPanel4.add(jPanel12, java.awt.BorderLayout.SOUTH);

        jSplitPane2.setDividerLocation(250);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setResizeWeight(0.5);

        jPanel13.setLayout(new java.awt.BorderLayout());

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("<html><strong>Información del Registro"));
        jPanel8.setMinimumSize(new java.awt.Dimension(700, 105));
        jPanel8.setPreferredSize(new java.awt.Dimension(700, 105));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jEditorPane1.setEditable(false);
        jEditorPane1.setContentType("text/html"); // NOI18N
        jScrollPane2.setViewportView(jEditorPane1);

        jPanel8.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel8, java.awt.BorderLayout.CENTER);

        jSplitPane2.setRightComponent(jPanel13);

        jPanel14.setLayout(new java.awt.BorderLayout());

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("<html><strong>Detalles del Monto"));
        jPanel15.setLayout(new java.awt.BorderLayout());

        tblDetallesMonto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Concepto", "Cantidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDetallesMonto.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblDetallesMonto.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tblDetallesMonto);

        jPanel15.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel14.add(jPanel15, java.awt.BorderLayout.CENTER);

        jSplitPane2.setLeftComponent(jPanel14);

        jPanel4.add(jSplitPane2, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel4);

        jPanel3.setMinimumSize(new java.awt.Dimension(588, 400));
        jPanel3.setPreferredSize(new java.awt.Dimension(100, 400));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("<html><Strong>REGISTROS DE FACTURAS Y NOTAS DE DÉBITO");
        jPanel1.add(jLabel7);

        jPanel3.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel10.setLayout(new java.awt.BorderLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("<html><strong>Acciones"));

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        jPanel6.add(btnNuevo);

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        jPanel6.add(btnEditar);

        btnNotaDebito.setText("Nota de Débito");
        btnNotaDebito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNotaDebitoActionPerformed(evt);
            }
        });
        jPanel6.add(btnNotaDebito);

        btnImprimir.setText("Vista Previa");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });
        jPanel6.add(btnImprimir);

        btnAnular.setText("Anular");
        btnAnular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnularActionPerformed(evt);
            }
        });
        jPanel6.add(btnAnular);

        btnExportar.setText("Exportar");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });
        jPanel6.add(btnExportar);

        btnExportar1.setText("Exportar ND");
        btnExportar1.setToolTipText("Exportar Notas de Débito");
        btnExportar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportar1ActionPerformed(evt);
            }
        });
        jPanel6.add(btnExportar1);

        jPanel10.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel5.add(jPanel10, java.awt.BorderLayout.NORTH);

        jTabbedPane1.setToolTipText("");
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder("<html><strong>Filtros y Cargas"));
        jPanel19.setLayout(new java.awt.GridLayout(2, 0));

        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT);
        flowLayout1.setAlignOnBaseline(true);
        jPanel11.setLayout(flowLayout1);

        jLabel6.setText("Filtrar Por:");
        jPanel11.add(jLabel6);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CUENTA DE REGISTRO", "CLIENTE", "No. DECLARACION", "PRODUCTO", "AGENCIA", "REMITENTE", "No. FACTURA", "No. NOTAS DE DEBITO", "TIPO DE TRANSACCION", "TIPO DE LLEGADA", "ESTADO" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel11.add(jComboBox1);

        jTextField6.setPreferredSize(new java.awt.Dimension(500, 26));
        jTextField6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField6KeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField6KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField6KeyReleased(evt);
            }
        });
        jPanel11.add(jTextField6);

        jPanel19.add(jPanel11);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel8.setText("Seleccione Mes y Año:");
        jPanel18.add(jLabel8);

        cboMesesFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Enero" }));
        jPanel18.add(cboMesesFiltro);

        cboAnioFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2016" }));
        jPanel18.add(cboAnioFiltro);

        chkRangoFechas.setText("Rango de Fechas");
        chkRangoFechas.setToolTipText("<html>Para buscar por rangos de fecha debe tener en cuenta que se buscan coincidencias <strong>Mayores</strong> a la fecha inicial y <strong>Menores o Iguales</strong> a la Fecha Final");
        chkRangoFechas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRangoFechasActionPerformed(evt);
            }
        });
        jPanel18.add(chkRangoFechas);

        jdcFechaInicio.setEnabled(false);
        jdcFechaInicio.setMaxSelectableDate(new Date());
        jPanel18.add(jdcFechaInicio);

        jdcFechaFin.setEnabled(false);
        jdcFechaFin.setMaxSelectableDate(new Date());
        jPanel18.add(jdcFechaFin);

        rtnVerAnual.setText("Ver Anual");
        rtnVerAnual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rtnVerAnualActionPerformed(evt);
            }
        });
        jPanel18.add(rtnVerAnual);

        rtnVerTodo.setText("Ver Todo");
        rtnVerTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rtnVerTodoActionPerformed(evt);
            }
        });
        jPanel18.add(rtnVerTodo);

        jButton6.setText("Actualizar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel18.add(jButton6);

        jPanel19.add(jPanel18);

        jPanel7.add(jPanel19, java.awt.BorderLayout.NORTH);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(300, 404));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CUENTA DE REGISTRO", "CLIENTE", "No. DECLARACION", "PRODUCTO", "ADUANA", "REMITENTE", "No. FACTURA", "No. NOTAS DE DEBITO", "TIPO DE TRANSACCION", "TIPO DE LLEGADA", "ESTADO", "VALOR CIF", "HONORARIOS", "MANEJO", "VALORIZACION", "PARTIDAS ADICIONALES", "IVA", "MONTO NOTAS DEBITO", "TOTAL FACTURA", "FechaCreacion", "UserCreacion", "FechaModificacion", "User Modificacion", "FechaImpresion", "UserImpresion", "APLICA IVA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setSelectionMode(0);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(12).setMinWidth(0);
            jTable1.getColumnModel().getColumn(12).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(12).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(13).setMinWidth(0);
            jTable1.getColumnModel().getColumn(13).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(13).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(14).setMinWidth(0);
            jTable1.getColumnModel().getColumn(14).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(14).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(15).setMinWidth(0);
            jTable1.getColumnModel().getColumn(15).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(15).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(16).setMinWidth(0);
            jTable1.getColumnModel().getColumn(16).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(16).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(17).setMinWidth(0);
            jTable1.getColumnModel().getColumn(17).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(17).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(19).setMinWidth(0);
            jTable1.getColumnModel().getColumn(19).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(19).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(20).setMinWidth(0);
            jTable1.getColumnModel().getColumn(20).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(20).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(21).setMinWidth(0);
            jTable1.getColumnModel().getColumn(21).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(21).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(22).setMinWidth(0);
            jTable1.getColumnModel().getColumn(22).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(22).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(23).setMinWidth(0);
            jTable1.getColumnModel().getColumn(23).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(23).setMaxWidth(0);
            jTable1.getColumnModel().getColumn(24).setMinWidth(0);
            jTable1.getColumnModel().getColumn(24).setPreferredWidth(0);
            jTable1.getColumnModel().getColumn(24).setMaxWidth(0);
        }

        jPanel7.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        chkExcluirAnuladas.setSelected(true);
        chkExcluirAnuladas.setText("Excluir Monto de Facturas Anuladas");
        chkExcluirAnuladas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkExcluirAnuladasActionPerformed(evt);
            }
        });
        jPanel17.add(chkExcluirAnuladas);

        chkExcluirPagadas.setSelected(true);
        chkExcluirPagadas.setText("Excluir Monto de Facturas Pagadas");
        chkExcluirPagadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkExcluirPagadasActionPerformed(evt);
            }
        });
        jPanel17.add(chkExcluirPagadas);

        jPanel2.add(jPanel17);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel2.setText("Sub Total:");
        jLabel2.setPreferredSize(new java.awt.Dimension(63, 23));
        jPanel16.add(jLabel2);

        lblSubTotal.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        lblSubTotal.setText("---");
        jPanel16.add(lblSubTotal);

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel3.setText("IVA Total:");
        jPanel16.add(jLabel3);

        lblIVATotal.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        lblIVATotal.setForeground(new java.awt.Color(255, 0, 0));
        lblIVATotal.setText("---");
        jPanel16.add(lblIVATotal);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel1.setText("Total Facturas:");
        jPanel16.add(jLabel1);

        lblTotal.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        lblTotal.setText("---");
        jPanel16.add(lblTotal);

        jPanel2.add(jPanel16);

        jPanel7.add(jPanel2, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab("Facturas", jPanel7);

        jPanel9.setLayout(new java.awt.BorderLayout());

        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder("<html><strong>Filtros y Cargas"));
        jPanel20.setLayout(new java.awt.GridLayout(2, 0));

        java.awt.FlowLayout flowLayout2 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT);
        flowLayout2.setAlignOnBaseline(true);
        jPanel21.setLayout(flowLayout2);

        jLabel9.setText("Filtrar Por Cliente:");
        jPanel21.add(jLabel9);

        txtBuscarND.setPreferredSize(new java.awt.Dimension(500, 26));
        txtBuscarND.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarNDKeyReleased(evt);
            }
        });
        jPanel21.add(txtBuscarND);

        jPanel20.add(jPanel21);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel10.setText("Seleccione Mes y Año:");
        jPanel22.add(jLabel10);

        cboMesesFiltroND.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Enero" }));
        jPanel22.add(cboMesesFiltroND);

        cboAnioFiltroND.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2016" }));
        jPanel22.add(cboAnioFiltroND);

        chkRangoFechasND.setText("Rango de Fechas");
        chkRangoFechasND.setToolTipText("<html>Para buscar por rangos de fecha debe tener en cuenta que se buscan coincidencias <strong>Mayores</strong> a la fecha inicial y <strong>Menores o Iguales</strong> a la Fecha Final");
        chkRangoFechasND.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRangoFechasNDActionPerformed(evt);
            }
        });
        jPanel22.add(chkRangoFechasND);

        jdcFechaInicioND.setEnabled(false);
        jdcFechaInicioND.setMaxSelectableDate(new Date());
        jPanel22.add(jdcFechaInicioND);

        jdcFechaFinND.setEnabled(false);
        jdcFechaFinND.setMaxSelectableDate(new Date());
        jPanel22.add(jdcFechaFinND);

        rtnVerAnualND.setText("Ver Anual");
        rtnVerAnualND.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rtnVerAnualNDActionPerformed(evt);
            }
        });
        jPanel22.add(rtnVerAnualND);

        rtnVerTodoND.setText("Ver Todo");
        rtnVerTodoND.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rtnVerTodoNDActionPerformed(evt);
            }
        });
        jPanel22.add(rtnVerTodoND);

        actualizarND.setText("Actualizar");
        actualizarND.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarNDActionPerformed(evt);
            }
        });
        jPanel22.add(actualizarND);

        jPanel20.add(jPanel22);

        jPanel9.add(jPanel20, java.awt.BorderLayout.NORTH);

        jScrollPane4.setPreferredSize(new java.awt.Dimension(300, 404));

        tblNotaDebitoC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IdCliente", "CLIENTE", "NOTA DE DÉBITO", "ESTADO", "MONTO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblNotaDebitoC.setSelectionMode(0);
        tblNotaDebitoC.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblNotaDebitoC.getTableHeader().setReorderingAllowed(false);
        tblNotaDebitoC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblNotaDebitoCMouseReleased(evt);
            }
        });
        tblNotaDebitoC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblNotaDebitoCKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(tblNotaDebitoC);
        tblNotaDebitoC.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tblNotaDebitoC.getColumnModel().getColumnCount() > 0) {
            tblNotaDebitoC.getColumnModel().getColumn(0).setMinWidth(0);
            tblNotaDebitoC.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblNotaDebitoC.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        jPanel9.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Notas de Débito No Asociadas", jPanel9);

        jPanel5.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel5, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel3);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(1367, 568));
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        new dlgFacturar(JOptionPane.getFrameForComponent(this), true).setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        if (UtilTable.isAnyoneSelected(jTable1)) {
            new dlgFacturar(JOptionPane.getFrameForComponent(this), true, Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString())).setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, Mensajes.DEBE_SELECCIONAR_REGISTRO, "No se puede completar la acción", JOptionPane.ERROR_MESSAGE);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditarActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        CargarTabla();
        FormatearTablas();
        CargarNotasDebito();
        // TODO add your handling code here:
    }//GEN-LAST:event_formInternalFrameOpened

    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased

        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseReleased

    private void jTextField6KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField6KeyReleased
        LlamarFiltro();
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6KeyReleased

    private void jTextField6KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField6KeyPressed

        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6KeyPressed

    private void jTextField6KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField6KeyTyped

        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6KeyTyped

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        CargarTabla();
        FormatearTablas();

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        LlamarFiltro();
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void chkExcluirAnuladasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkExcluirAnuladasActionPerformed
        LlamarFiltro();
        // TODO add your handling code here:
    }//GEN-LAST:event_chkExcluirAnuladasActionPerformed

    private void rtnVerAnualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rtnVerAnualActionPerformed
        if (rtnVerTodo.isSelected() || chkRangoFechas.isSelected()) {
            rtnVerAnual.setSelected(true);
            rtnVerTodo.setSelected(false);
            chkRangoFechas.setSelected(false);

        }
        jdcFechaFin.setEnabled(false);
        jdcFechaInicio.setEnabled(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_rtnVerAnualActionPerformed

    private void rtnVerTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rtnVerTodoActionPerformed
        if (rtnVerAnual.isSelected() || chkRangoFechas.isSelected()) {
            rtnVerTodo.setSelected(true);
            rtnVerAnual.setSelected(false);
            chkRangoFechas.setSelected(false);

        }
        jdcFechaFin.setEnabled(false);
        jdcFechaInicio.setEnabled(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_rtnVerTodoActionPerformed

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased

        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1KeyReleased

    private void btnNotaDebitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNotaDebitoActionPerformed
        try {
            if (jTabbedPane1.getSelectedIndex() == 0) {
                if (UtilTable.isAnyoneSelected(jTable1)) {

                    new dlgNotaDebito(JOptionPane.getFrameForComponent(this),
                            false,
                            Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString()), 0,
                            jTable1.getValueAt(jTable1.getSelectedRow(), 10).toString(),
                            false
                    ).setVisible(true);

                } else {
                    JOptionPane.showMessageDialog(this, Mensajes.DEBE_SELECCIONAR_REGISTRO, "No se puede completar la acción", JOptionPane.ERROR_MESSAGE);
                }
            } else if (UtilTable.isAnyoneSelected(tblNotaDebitoC)) {

                new dlgNotaDebito(JOptionPane.getFrameForComponent(this),
                        false,
                        Integer.parseInt(tblNotaDebitoC.getValueAt(tblNotaDebitoC.getSelectedRow(), 0).toString()),
                        Integer.parseInt(tblNotaDebitoC.getValueAt(tblNotaDebitoC.getSelectedRow(), 2).toString()),
                        tblNotaDebitoC.getValueAt(tblNotaDebitoC.getSelectedRow(), 1).toString(),
                        true
                ).setVisible(true);

            } else {
                JOptionPane.showMessageDialog(this, Mensajes.DEBE_SELECCIONAR_REGISTRO, "No se puede completar la acción", JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error Formateo Numerico", JOptionPane.ERROR_MESSAGE);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnNotaDebitoActionPerformed

    private void chkExcluirPagadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkExcluirPagadasActionPerformed
        LlamarFiltro();
        // TODO add your handling code here:
    }//GEN-LAST:event_chkExcluirPagadasActionPerformed

    private void btnAnularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnularActionPerformed
        if (UtilTable.isAnyoneSelected(jTable1)) {
            new dlgAnular(JOptionPane.getFrameForComponent(this), true, "Factura", Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString())).setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, Mensajes.DEBE_SELECCIONAR_REGISTRO, "No se puede completar la acción", JOptionPane.ERROR_MESSAGE);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAnularActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        if (UtilTable.isAnyoneSelected(jTable1)) {
            try {
                new dlgImprimirFactura(JOptionPane.getFrameForComponent(this),
                        false,
                        Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString())
                ).setVisible(true);
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error Formateo Numerico", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, Mensajes.DEBE_SELECCIONAR_REGISTRO, "No se puede completar la acción", JOptionPane.ERROR_MESSAGE);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing

        // TODO add your handling code here:
    }//GEN-LAST:event_formInternalFrameClosing

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        UtilTable.Exportar(this, jTable1);
    }//GEN-LAST:event_btnExportarActionPerformed

    private void chkRangoFechasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRangoFechasActionPerformed
        if (rtnVerAnual.isSelected() || rtnVerTodo.isSelected()) {
            rtnVerTodo.setSelected(false);
            rtnVerAnual.setSelected(false);
            chkRangoFechas.setSelected(true);

        }
        if (chkRangoFechas.isSelected()) {
            jdcFechaFin.setEnabled(true);
            jdcFechaInicio.setEnabled(true);
        } else {
            jdcFechaFin.setEnabled(false);
            jdcFechaInicio.setEnabled(false);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_chkRangoFechasActionPerformed

    private void btnExportar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportar1ActionPerformed
        new dlgExportarNotasDebito(JOptionPane.getFrameForComponent(this), true).setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_btnExportar1ActionPerformed

    private void lblCantidadRegistrosMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCantidadRegistrosMouseEntered
        lblCantidadRegistros.setToolTipText(lblCantidadRegistros.getText());
        // TODO add your handling code here:
    }//GEN-LAST:event_lblCantidadRegistrosMouseEntered

    private void txtBuscarNDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarNDKeyReleased
        FiltrarNotas();
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscarNDKeyReleased

    private void chkRangoFechasNDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRangoFechasNDActionPerformed
        if (rtnVerAnualND.isSelected() || rtnVerTodoND.isSelected()) {
            rtnVerTodoND.setSelected(false);
            rtnVerAnualND.setSelected(false);
            chkRangoFechasND.setSelected(true);

        }
        if (chkRangoFechasND.isSelected()) {
            jdcFechaFinND.setEnabled(true);
            jdcFechaInicioND.setEnabled(true);
        } else {
            jdcFechaFinND.setEnabled(false);
            jdcFechaInicioND.setEnabled(false);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_chkRangoFechasNDActionPerformed

    private void rtnVerAnualNDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rtnVerAnualNDActionPerformed
        if (rtnVerTodoND.isSelected() || chkRangoFechasND.isSelected()) {
            rtnVerAnualND.setSelected(true);
            rtnVerTodoND.setSelected(false);
            chkRangoFechasND.setSelected(false);

        }
        jdcFechaFinND.setEnabled(false);
        jdcFechaInicioND.setEnabled(false);

        // TODO add your handling code here:
    }//GEN-LAST:event_rtnVerAnualNDActionPerformed

    private void rtnVerTodoNDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rtnVerTodoNDActionPerformed
        if (rtnVerAnualND.isSelected() || chkRangoFechasND.isSelected()) {
            rtnVerTodoND.setSelected(true);
            rtnVerAnualND.setSelected(false);
            chkRangoFechasND.setSelected(false);

        }
        jdcFechaFinND.setEnabled(false);
        jdcFechaInicioND.setEnabled(false);

        // TODO add your handling code here:
    }//GEN-LAST:event_rtnVerTodoNDActionPerformed

    private void actualizarNDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarNDActionPerformed
        CargarNotasDebito();
        // TODO add your handling code here:
    }//GEN-LAST:event_actualizarNDActionPerformed

    private void tblNotaDebitoCMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNotaDebitoCMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tblNotaDebitoCMouseReleased

    private void tblNotaDebitoCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblNotaDebitoCKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tblNotaDebitoCKeyReleased

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        if (jTabbedPane1.getSelectedIndex() == 0) {
            btnNuevo.setEnabled(true);
            btnEditar.setEnabled(true);
            btnImprimir.setEnabled(true);
            btnAnular.setEnabled(true);
            ContarRegistros((DefaultTableModel) jTable1.getModel());
        } else {
            btnNuevo.setEnabled(false);
            btnEditar.setEnabled(false);
            btnImprimir.setEnabled(false);
            btnAnular.setEnabled(false);
            ContarRegistros((DefaultTableModel) tblNotaDebitoC.getModel());
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void jTable1SelectionChanged(ListSelectionEvent e) {
        if (UtilTable.isAnyoneSelected(jTable1)) {
            try {

                btnEditar.setEnabled(VerificarEstado(jTable1.getValueAt(jTable1.getSelectedRow(), 10).toString(), btnEditar.getText()));
                btnAnular.setEnabled(VerificarEstado(jTable1.getValueAt(jTable1.getSelectedRow(), 10).toString(), btnAnular.getText()));
                btnImprimir.setEnabled(true);
                CargarDetalles(Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString()),
                        jTable1.getValueAt(jTable1.getSelectedRow(), 10).toString());

            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error Formateo Numerico", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void tblNotaDebitoCSelectionChanged(ListSelectionEvent e) {

        if (UtilTable.isAnyoneSelected(tblNotaDebitoC)) {
            MostrarInformacionNotaDebito();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualizarND;
    private javax.swing.JButton btnAnular;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnExportar1;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnNotaDebito;
    private javax.swing.JButton btnNuevo;
    private javax.swing.ButtonGroup buttonGroup1;
    private static javax.swing.JComboBox<String> cboAnioFiltro;
    private static javax.swing.JComboBox<String> cboAnioFiltroND;
    private static javax.swing.JComboBox<String> cboMesesFiltro;
    private static javax.swing.JComboBox<String> cboMesesFiltroND;
    private static javax.swing.JCheckBox chkExcluirAnuladas;
    private static javax.swing.JCheckBox chkExcluirPagadas;
    private static javax.swing.JCheckBox chkRangoFechas;
    private static javax.swing.JCheckBox chkRangoFechasND;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private static javax.swing.JTable jTable1;
    private static javax.swing.JTextField jTextField6;
    private static com.toedter.calendar.JDateChooser jdcFechaFin;
    private static com.toedter.calendar.JDateChooser jdcFechaFinND;
    private static com.toedter.calendar.JDateChooser jdcFechaInicio;
    private static com.toedter.calendar.JDateChooser jdcFechaInicioND;
    private static javax.swing.JLabel lblCantidadRegistros;
    private static javax.swing.JLabel lblIVATotal;
    private static javax.swing.JLabel lblSubTotal;
    private static javax.swing.JLabel lblTotal;
    private static javax.swing.JCheckBox rtnVerAnual;
    private static javax.swing.JCheckBox rtnVerAnualND;
    private static javax.swing.JCheckBox rtnVerTodo;
    private static javax.swing.JCheckBox rtnVerTodoND;
    private javax.swing.JTable tblDetallesMonto;
    private static javax.swing.JTable tblNotaDebitoC;
    private static javax.swing.JTextField txtBuscarND;
    // End of variables declaration//GEN-END:variables

    public static void CargarTabla() {
        try {
            facturasBean = new FacturasBean();
            filas = new ArrayList<>();
            registrosAnulados = new ArrayList<>();
            jTextField6.setText("");

            if (rtnVerTodo.isSelected()) {
                CargarCombos(facturasBean);
                facturas = facturasBean.FindAll();
            } else {
                if (FirstRun) {
                    CargarCombos(facturasBean);
                    FirstRun = false;
                }
                if (chkRangoFechas.isSelected()) {
                    facturas = facturasBean.FindByRandoFechas(jdcFechaInicio.getDate(), jdcFechaFin.getDate());
                } else if (rtnVerAnual.isSelected()) {
                    facturas = facturasBean.FindAll(-1, Integer.parseInt(cboAnioFiltro.getSelectedItem().toString()));
                } else {
                    facturas = facturasBean.FindAll(UtilDate.IntegerFromMes(cboMesesFiltro.getSelectedItem().toString()), Integer.parseInt(cboAnioFiltro.getSelectedItem().toString()));
                }
            }
            DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
            UtilTable.LimpiarTabla(modelo);
            for (Factura f : facturas) {

                Cliente c = f.getCliente();
                Producto p = f.getProducto();
                Agencia a = f.getAgencia();
                Serviciosagencia sa = f.getServiciosagencia();

                notasDebito = notaDebitoBean.FindAll(f.getCuentaRegistro());

                if (f.getEstado().equalsIgnoreCase("Anulada")) {
                    registrosAnulados.add(registrosAnuladosBean.FindById("Factura", f.getCuentaRegistro()));
                }
                CargarFila(modelo, f, c, p, a, sa, notasDebito);

            }

            CargarSumatorias(modelo);
        } catch (NullPointerException e) {
            Mensajes.ErrorDesconocido(null, e);
            e.printStackTrace();
        }

//Verificar informacion de la Tabla
//        for (int i = 0; i < jTable1.getColumnCount(); i++) {
//            System.out.println("("+i+")------" + jTable1.getColumnName(i) + "------");
//            for (int j = 0; j < jTable1.getRowCount(); j++) {
//                System.out.println(jTable1.getValueAt(j, i));
//            }
//        }
    }

    private static void ContarRegistros(DefaultTableModel modelo) {
        lblCantidadRegistros.setText("Cantidad de Registros: " + modelo.getRowCount());
    }

    private void CargarDetalles(int CuentaRegistro, String Estado) {
        String Informacion;

        Informacion = "<br><strong>Cuenta de Registro seleccionada: " + CuentaRegistro
                + "</strong> <br><br> Fecha de Creacion: <strong>" + jTable1.getValueAt(jTable1.getSelectedRow(), 19)
                + "</strong> <br>   Usuario Creador: <strong>" + jTable1.getValueAt(jTable1.getSelectedRow(), 20)
                + "</strong> <br><br>   Ultima Modificación: <strong>" + jTable1.getValueAt(jTable1.getSelectedRow(), 21)
                + "</strong> <br>   Usuario que Modificó: <strong>" + jTable1.getValueAt(jTable1.getSelectedRow(), 22)
                + "</strong>";

        if (Estado.equals("Impresa") || Estado.equals("Impresa con ND")) {
            Informacion = Informacion + "<br><br>Fecha de Impresión: <strong>" + jTable1.getValueAt(jTable1.getSelectedRow(), 23)
                    + "</strong> <br> Usuario que imprimió: <strong>" + jTable1.getValueAt(jTable1.getSelectedRow(), 24)
                    + "</strong>";
        }
        if (Estado.equals("Anulada")) {
            for (Registrosanulados ra : registrosAnulados) {
                if (ra.getIdRegistro() == CuentaRegistro) {
                    Informacion = Informacion + "<br><br>Fecha de Anulación: <strong>" + ra.getFechaAnula()
                            + "</strong> <br>   Usuario Anuló: <strong>" + ra.getUsuario().getIdUsuario()
                            + "</strong> <br>   Motivo de Anulación: <strong>" + ra.getMotivo();
                    break;
                }
            }

        }
        jEditorPane1.setText(Informacion);

        for (ObjetoFila f : filas) {
            if (f.getCuentaRegistro().equals(String.valueOf(CuentaRegistro))) {
                CargarDetalleMonto(f, f.getNotasDebito());
                break;
            }
        }
    }

    private void Filtrar(String Criterio, String Valor) throws NumberFormatException {
        FacturasIvasTotales = 0;
        FacturasSubTotalesTotales = 0;
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        UtilTable.LimpiarTabla(modelo);
        if (Valor.equals("")) {
            for (ObjetoFila of : filas) {
                CargarFila(modelo, of);
            }
        } else {
            switch (Criterio) {
                case "CUENTA DE REGISTRO": {
                    filas.stream().filter((of) -> (of.getCuentaRegistro().startsWith(Valor))).forEach((of) -> {
                        CargarFila(modelo, of);
                    });
                }
                break;

                case "CLIENTE": {
                    filas.stream().filter((of) -> (of.getRazonSocial().toLowerCase().contains(Valor.toLowerCase()))).forEach((of) -> {
                        CargarFila(modelo, of);
                    });
                }
                break;

                case "No. DECLARACION": {
                    filas.stream().filter((of) -> (of.getNoDeclaracion().toLowerCase().startsWith(Valor.toLowerCase()))).forEach((of) -> {
                        CargarFila(modelo, of);
                    });
                }
                break;

                case "PRODUCTO": {
                    filas.stream().filter((of) -> (of.getProducto().toLowerCase().contains(Valor.toLowerCase()))).forEach((of) -> {
                        CargarFila(modelo, of);
                    });
                }
                break;

                case "AGENCIA": {
                    filas.stream().filter((of) -> (of.getAgencia().toLowerCase().contains(Valor.toLowerCase()))).forEach((of) -> {
                        CargarFila(modelo, of);
                    });
                }
                break;

                case "REMITENTE": {
                    filas.stream().filter((of) -> (of.getRemitente().toLowerCase().contains(Valor.toLowerCase()))).forEach((of) -> {
                        CargarFila(modelo, of);
                    });
                }
                break;

                case "No. FACTURA": {
                    filas.stream().filter((of) -> (of.getNoFactura().toLowerCase().startsWith(Valor.toLowerCase()))).forEach((of) -> {
                        CargarFila(modelo, of);
                    });
                }
                break;

                case "No. NOTAS DE DEBITO": {
                    for (ObjetoFila of : filas) {
                        for (int i = 0; i < of.getNotasDebito().size(); i++) {
                            System.out.println(of.getNotasDebito().get(i).getNotaDebito());
                            if (of.getNotasDebito().get(i).getNotaDebito().contains("ND-" + Valor)) {
                                CargarFila(modelo, of);
                                break;
                            }
                        }

                    }
                }
                break;

                case "TIPO DE TRANSACCION": {
                    filas.stream().filter((of) -> (of.getTipoTransaccion().toLowerCase().startsWith(Valor.toLowerCase()))).forEach((of) -> {
                        CargarFila(modelo, of);
                    });
                }
                break;
                case "TIPO DE LLEGADA": {
                    filas.stream().filter((of) -> (of.getTipoLlegada().toLowerCase().startsWith(Valor.toLowerCase()))).forEach((of) -> {
                        CargarFila(modelo, of);
                    });
                }
                break;
                case "ESTADO": {
                    filas.stream().filter((of) -> (of.getEstado().toLowerCase().startsWith(Valor.toLowerCase()))).forEach((of) -> {
                        CargarFila(modelo, of);
                    });
                }
                break;
            }
        }
        CargarSumatorias(modelo);
    }

    private static void CargarFila(DefaultTableModel modelo, Factura f, Cliente c, Producto p, Agencia a, Serviciosagencia sa, List<Notadebito> nd) {
        String TipoTransaccion = "", TipoLlegada = "";
        if (f != null) {
            if (f.getTipoTransaccion()) {
                TipoTransaccion = "Importacion";
            } else {
                TipoTransaccion = "Exportacion";
            }

            switch (f.getTipoLlegada()) {
                case "1": {
                    TipoLlegada = "Terrestre";
                }
                break;
                case "2": {
                    TipoLlegada = "Maritima";
                }
                break;
                case "3": {
                    TipoLlegada = "Aerea";
                }
                break;
            }
        }

        double MontoND = 0.0;
        String NotasDebito = "";
        List<NotaDebitoInterna> notaInterna = new ArrayList<>();
        if (nd != null) {
            for (Notadebito notaDebito : nd) {

                double NDIndividual = 0.0;
                detalleNotaDebito = detalleNotaDebitoBean.FindAll(notaDebito.getNotaDebito());
                if (!notaDebito.getEstado().equals("Anulada") && !notaDebito.getEstado().equals("Pagada")) {
                    for (Detallenotadebito detalle : detalleNotaDebito) {
                        MontoND += detalle.getMonto();
                        NDIndividual += detalle.getMonto();
                    }

                    notaInterna.add(new NotaDebitoInterna("(" + notaDebito.getEstado().charAt(0) + ") ND-" + notaDebito.getNotaDebito(), "" + NDIndividual));
                } else {
                    notaInterna.add(new NotaDebitoInterna("(" + notaDebito.getEstado().charAt(0) + ") ND-" + notaDebito.getNotaDebito(), "" + 0));
                }
                NotasDebito = NotasDebito + "ND-" + notaDebito.getNotaDebito() + " ";

            }
        }

        ObjetoFila o;
        double TotalFactura = 0.00;
        boolean AplicaIVA = true;

        if (f == null) {
            o = new ObjetoFila(
                    "",
                    c.getRazonSocial(),
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "0",
                    "0",
                    "0",
                    "0",
                    false,
                    notaInterna);

            modelo.addRow(new Object[]{
                "",
                c.getRazonSocial(),
                "",
                "",
                "",
                "",
                "",
                NotasDebito,
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                String.format("%,.2f", MontoND),
                "",
                "",
                "",
                0,
                0,
                0,
                0,
                "EXONERADO"});

        } else {
            o = new ObjetoFila(
                    "" + f.getCuentaRegistro(),
                    c.getRazonSocial(),
                    p.getNombre(),
                    a.getNombre(),
                    f.getNumeroDeclaracion(),
                    f.getFacturaExterna(),
                    f.getRemite(),
                    TipoTransaccion,
                    TipoLlegada,
                    f.getEstado(),
                    String.format("%,.2f", f.getValorCif()),
                    f.getUsuarioByUserCreacion().getIdUsuario(),
                    f.getUsuarioByUserModificacion().getIdUsuario(),
                    f.getUsuarioByUserImpresion() != null ? f.getUsuarioByUserImpresion().getIdUsuario() : "",
                    (((f.getFechaCreacion() == null) ? "" : UtilDate.FechaMySQL(f.getFechaCreacion()))),
                    (((f.getFechaModificacion() == null) ? "" : UtilDate.FechaMySQL(f.getFechaModificacion()))),
                    (((f.getFechaImpresion() == null) ? "" : UtilDate.FechaMySQL(f.getFechaImpresion()))),
                    ((sa == null) ? "0.00" : sa.getHonorario().toString()),
                    ((sa == null) ? "0.00" : sa.getManejo().toString()),
                    ((sa == null) ? "0.00" : sa.getValorizacion().toString()),
                    ((sa == null) ? "0.00" : sa.getPartidasAdicionales().toString()),
                    ((sa == null) ? true : sa.getAplicaIva()),
                    notaInterna);

            if (sa != null) {
                TotalFactura = sa.getHonorario() + sa.getManejo() + sa.getValorizacion() + sa.getPartidasAdicionales();
                AplicaIVA = sa.getAplicaIva();
            } else {
                sa = new Serviciosagencia();
//            sa.setHonorario(0.00);
//            sa.setManejo(0.00);
            }

            modelo.addRow(new Object[]{
                f.getCuentaRegistro(),
                c.getRazonSocial(),
                f.getNumeroDeclaracion(),
                p.getNombre(),
                a.getNombre(),
                f.getRemite(),
                f.getFacturaExterna(),
                NotasDebito,
                TipoTransaccion,
                TipoLlegada,
                f.getEstado(),
                String.format("%,.2f", f.getValorCif()),
                sa.getHonorario(),
                sa.getManejo(),
                sa.getValorizacion(),
                sa.getPartidasAdicionales(),
                (AplicaIVA) ? String.format("%,.2f", ((TotalFactura * 0.15))) : "0.00",
                String.format("%,.2f", MontoND),
                (AplicaIVA) ? String.format("%,.2f", ((TotalFactura * 1.15) + MontoND)) : String.format("%,.2f", (TotalFactura + MontoND)),
                (((f.getFechaCreacion() == null) ? "---" : UtilDate.FechaMySQL(f.getFechaCreacion()))),
                f.getUsuarioByUserCreacion().getIdUsuario(),
                (((f.getFechaModificacion() == null) ? "---" : UtilDate.FechaMySQL(f.getFechaModificacion()))),
                f.getUsuarioByUserModificacion().getIdUsuario(),
                (((f.getFechaImpresion() == null) ? "---" : UtilDate.FechaMySQL(f.getFechaImpresion()))),
                f.getUsuarioByUserImpresion() == null ? "" : f.getUsuarioByUserImpresion().getIdUsuario(),
                (AplicaIVA) ? "SI" : "EXONERADO"});

//COMENAREO ESTA LINEA PORQUE SE ACTUALIZA QUE EL MONTO DE LA NOTA DE DEBITO NO SE INCLUYA EN EL TOTAL
//        CalcularSumatorias(f, null, TotalFactura, MontoND, AplicaIVA);
            CalcularSumatorias(f, null, TotalFactura, 0, AplicaIVA);

        }

        filas.add(o);
    }

    private static void CargarFila(DefaultTableModel modelo, ObjetoFila of) {
        double TotalFactura = 0.00, MontoND = 0.00;
        String NotasDebito = "";
        TotalFactura = Double.parseDouble(of.getHonorario())
                + Double.parseDouble(of.getManejo())
                + Double.parseDouble(of.getValorizacion())
                + Double.parseDouble(of.getPartidasAdicionales());

        for (NotaDebitoInterna notaDebito : of.getNotasDebito()) {
            NotasDebito = NotasDebito + notaDebito.getNotaDebito().substring(4) + " ";

            MontoND = MontoND + Double.parseDouble(notaDebito.getMonto());
        }

        modelo.addRow(new Object[]{
            of.getCuentaRegistro(),
            of.getRazonSocial(),
            of.getNoDeclaracion(),
            of.getProducto(),
            of.getAgencia(),
            of.getRemitente(),
            of.getNoFactura(),
            NotasDebito,
            of.getTipoTransaccion(),
            of.getTipoLlegada(),
            of.getEstado(),
            of.getValorCIF(),
            of.getHonorario(),
            of.getManejo(),
            of.getValorizacion(),
            of.getPartidasAdicionales(),
            ((of.isAplicaIVA()) ? String.format("%,.2f", (TotalFactura * 0.15)) : "0.00"),
            String.format("%,.2f", MontoND),
            ((of.isAplicaIVA()) ? String.format("%,.2f", (TotalFactura * 1.15) + MontoND) : String.format("%,.2f", TotalFactura + MontoND)),
            of.getFechaCreacion(),
            of.getUsuarioCreador(),
            of.getFechaModificacion(),
            of.getUsuarioModificador(),
            of.getFechaImpresion(),
            of.getUsuarioImpresor(),
            (of.isAplicaIVA()) ? "SI" : "EXONERADO"
        });

        //COMENAREO ESTA LINEA PORQUE SE ACTUALIZA QUE EL MONTO DE LA NOTA DE DEBITO NO SE INCLUYA EN EL TOTAL
        //CalcularSumatorias(null, of, TotalFactura, MontoND, of.isAplicaIVA());
        CalcularSumatorias(null, of, TotalFactura, 0, of.isAplicaIVA());
    }

    private static void CalcularSumatorias(Factura f, ObjetoFila of, double TotalFactura, double MontoND, boolean AplicaIVA) {
        if (of == null) {
            if (chkExcluirAnuladas.isSelected()) {
                if (chkExcluirPagadas.isSelected()) { //Ambas estan seleccionadas
                    if (!f.getEstado().equals("Anulada") && !f.getEstado().equals("Pagada")) {
                        FacturasSubTotalesTotales = FacturasSubTotalesTotales + TotalFactura + MontoND;
                        FacturasIvasTotales = FacturasIvasTotales + ((AplicaIVA) ? (TotalFactura * 0.15) : 0);
                    }
                } else //Solo esta seleccionada el Excluir las facturas Anuladas
                {
                    if (!f.getEstado().equals("Anulada")) {
                        FacturasSubTotalesTotales = FacturasSubTotalesTotales + TotalFactura + MontoND;
                        FacturasIvasTotales = FacturasIvasTotales + ((AplicaIVA) ? (TotalFactura * 0.15) : 0);
                    }
                }
            } else if (chkExcluirPagadas.isSelected()) { //Solo esta seleccionada Excluir facturas pagadas
                if (!f.getEstado().equals("Pagada")) {
                    FacturasSubTotalesTotales = FacturasSubTotalesTotales + TotalFactura + MontoND;
                    FacturasIvasTotales = FacturasIvasTotales + ((AplicaIVA) ? (TotalFactura * 0.15) : 0);
                }
            } else {
                FacturasSubTotalesTotales = FacturasSubTotalesTotales + TotalFactura + MontoND;
                FacturasIvasTotales = FacturasIvasTotales + ((AplicaIVA) ? (TotalFactura * 0.15) : 0);
            }
        } else if (chkExcluirAnuladas.isSelected()) {
            if (chkExcluirPagadas.isSelected()) { //Ambas estan seleccionadas
                if (!of.getEstado().equals("Anulada") && !of.getEstado().equals("Pagada")) {
                    FacturasSubTotalesTotales = FacturasSubTotalesTotales + TotalFactura + MontoND;
                    FacturasIvasTotales = FacturasIvasTotales + ((of.isAplicaIVA()) ? (TotalFactura * 0.15) : 0);
                }
            } else //Solo esta seleccionada el Excluir las facturas Anuladas
            {
                if (!of.getEstado().equals("Anulada")) {
                    FacturasSubTotalesTotales = FacturasSubTotalesTotales + TotalFactura + MontoND;
                    FacturasIvasTotales = FacturasIvasTotales + ((of.isAplicaIVA()) ? (TotalFactura * 0.15) : 0);
                }
            }
        } else if (chkExcluirPagadas.isSelected()) { //Solo esta seleccionada Excluir facturas pagadas
            if (!of.getEstado().equals("Pagada")) {
                FacturasSubTotalesTotales = FacturasSubTotalesTotales + TotalFactura + MontoND;
                FacturasIvasTotales = FacturasIvasTotales + ((of.isAplicaIVA()) ? (TotalFactura * 0.15) : 0);
            }
        } else {
            FacturasSubTotalesTotales = FacturasSubTotalesTotales + TotalFactura + MontoND;
            FacturasIvasTotales = FacturasIvasTotales + ((of.isAplicaIVA()) ? (TotalFactura * 0.15) : 0);
        } //FacturasIvasTotales = FacturasIvasTotales + ((of.isAplicaIVA()) ? (TotalFactura * 0.15) : 0);
//        System.out.println("-------------------------------------------------------------------------------------");
//        System.out.println("FacturasSubTotalesTotales   " + FacturasSubTotalesTotales);
//        System.out.println("FacturasIvasTotales         " + FacturasIvasTotales);
    }

    private void CargarDetalleMonto(ObjetoFila of, List<NotaDebitoInterna> notas) {
        double SubTotalFactura = 0.00, IVA = 0.00, Total = 0.00;

        SubTotalFactura = Double.parseDouble(of.getHonorario())
                + Double.parseDouble(of.getManejo())
                + Double.parseDouble(of.getValorizacion())
                + Double.parseDouble(of.getPartidasAdicionales());
        IVA = ((of.isAplicaIVA()) ? SubTotalFactura * 0.15 : 0.00);
        SubTotalFactura = SubTotalFactura + IVA;

        DefaultTableModel modelo = (DefaultTableModel) tblDetallesMonto.getModel();
        UtilTable.LimpiarTabla(modelo);
        modelo.addRow(new Object[]{"Honorario", of.getHonorario()});
        modelo.addRow(new Object[]{"Manejo", of.getManejo()});
        modelo.addRow(new Object[]{"Valorizacion", of.getValorizacion()});
        modelo.addRow(new Object[]{"Partidas Adicionales", of.getPartidasAdicionales()});
        modelo.addRow(new Object[]{"IVA", String.format("%,.2f", IVA)});
        modelo.addRow(new Object[]{"SUBTOTAL", String.format("%,.2f", SubTotalFactura)});

        for (NotaDebitoInterna nota : notas) {
            modelo.addRow(new Object[]{nota.getNotaDebito(), String.format("%,.2f", Double.parseDouble(nota.getMonto()))});
            Total += Double.parseDouble(nota.getMonto());
        }
        modelo.addRow(new Object[]{"TOTAL", String.format("%,.2f", (Total + SubTotalFactura))});

    }

    private void FormatearTablas() {

        tblDetallesMonto.setDefaultRenderer(Object.class, new FormatoTabla());
        jTable1
                .setDefaultRenderer(Object.class, new TableRender());
        jTable1.getTableHeader().setFont(FormatoTabla.Negrilla);
    }

    private static void CargarCombos(FacturasBean facturasBean) {
        cboAnioFiltro.removeAllItems();
        cboMesesFiltro.removeAllItems();

        cboAnioFiltroND.removeAllItems();
        cboMesesFiltroND.removeAllItems();

        for (Integer entero : facturasBean.ObtenerMesesAnios(true)) {
            cboMesesFiltro.addItem(UtilDate.MesFromInteger(entero));
        }
        for (Integer entero : facturasBean.ObtenerMesesAnios(false)) {
            cboAnioFiltro.addItem(entero.toString());
        }

        for (Integer entero : notaDebitoBean.ObtenerMesesAnios(true)) {
            cboMesesFiltroND.addItem(UtilDate.MesFromInteger(entero));
        }
        for (Integer entero : notaDebitoBean.ObtenerMesesAnios(false)) {
            cboAnioFiltroND.addItem(entero.toString());
        }

        cboMesesFiltro.setSelectedItem(UtilDate.MesActual());
        cboMesesFiltroND.setSelectedItem(UtilDate.MesActual());
    }

    private static void CargarSumatorias(DefaultTableModel modelo) {
//        System.out.println("Cantidad de Registros " + modelo.getRowCount());
        ContarRegistros(modelo);
        lblTotal.setText("C$ " + String.format("%,.2f", (FacturasSubTotalesTotales + FacturasIvasTotales)));
        lblSubTotal.setText("C$ " + String.format("%,.2f", FacturasSubTotalesTotales));
        lblIVATotal.setText("C$ " + String.format("%,.2f", FacturasIvasTotales));

        FacturasSubTotalesTotales = 0;
        FacturasIvasTotales = 0;
    }

    private void LlamarFiltro() {
        if (jComboBox1.getSelectedIndex() == 0) {
            try {
                Filtrar(jComboBox1.getSelectedItem().toString(), jTextField6.getText());
            } catch (NumberFormatException e) {
                jTextField6.setText("");
            }
        } else {
            Filtrar(jComboBox1.getSelectedItem().toString(), jTextField6.getText());
        }
    }

    private boolean VerificarEstado(String Estado, String botonName) {
        boolean SetEnabled = false;
        switch (botonName) {
            case "Editar": {
                if (Estado.equals("Impresa") || Estado.equals("Impresa con ND") || Estado.equals("Anulada") || Estado.equals("Pagada")) {
                    SetEnabled = false;
                } else {
                    SetEnabled = true;
                }
            }
            break;
            case "Anular": {
                if (Estado.equals("Generada") || Estado.equals("Modificada") || Estado.equals("Anulada") || Estado.equals("Pagada")) {
                    SetEnabled = false;
                } else {
                    SetEnabled = true;
                }
            }
            break;
        }
        return SetEnabled;
    }

    public static void CargarNotasDebito() {
        //NUEVO AGREGADO PARA PODER OBTENER LAS NOTAS DE DEBITO QUE NO SON ASOCIADAS A CUENTAS DE REGISTRO PERO SI A UN CLIENTE
        notasDebito = null;
        DefaultTableModel modelo = (DefaultTableModel) tblNotaDebitoC.getModel();
        UtilTable.LimpiarTabla(modelo);
        if (rtnVerTodoND.isSelected()) {
            notasDebito = notaDebitoBean.FindAllCliente();
        } else if (chkRangoFechasND.isSelected()) {
            notasDebito = notaDebitoBean.FindAllClienteRango(jdcFechaInicioND.getDate(), jdcFechaFinND.getDate());
        } else if (rtnVerAnualND.isSelected()) {
            notasDebito = notaDebitoBean.FindAllClienteTime(-1, Integer.parseInt(cboAnioFiltroND.getSelectedItem().toString()));
        } else {
            notasDebito = notaDebitoBean.FindAllClienteTime(UtilDate.IntegerFromMes(cboMesesFiltroND.getSelectedItem().toString()), Integer.parseInt(cboAnioFiltroND.getSelectedItem().toString()));
        }

        if (!notasDebito.isEmpty()) {
            notasDebito.stream().forEach((node) -> {
                List<Detallenotadebito> detalle = detalleNotaDebitoBean.FindAll(node.getNotaDebito());

                modelo.addRow(new Object[]{
                    node.getCliente().getIdCliente(),
                    node.getCliente().getRazonSocial(),
                    node.getNotaDebito(),
                    node.getEstado(),
                    String.format("%,.2f", detalle.stream().mapToDouble(i -> i.getMonto()).sum())
                });
            });
        }
        ContarRegistros((DefaultTableModel) tblNotaDebitoC.getModel());

    }

    private void FiltrarNotas() {
        try {
            DefaultTableModel modelo = (DefaultTableModel) tblNotaDebitoC.getModel();
            UtilTable.LimpiarTabla(modelo);

            notasDebito.stream().filter((of) -> (of.getCliente().getRazonSocial().toLowerCase().contains(txtBuscarND.getText().toLowerCase()))).forEach((node) -> {
                List<Detallenotadebito> detalle = detalleNotaDebitoBean.FindAll(node.getNotaDebito());

                modelo.addRow(new Object[]{
                    node.getCliente().getIdCliente(),
                    node.getCliente().getRazonSocial(),
                    node.getNotaDebito(),
                    node.getEstado(),
                    String.format("%,.2f", detalle.stream().mapToDouble(i -> i.getMonto()).sum())
                });
            });
            ContarRegistros(modelo);
        } catch (NumberFormatException e) {
            txtBuscarND.setText("");
        }

    }

    private void MostrarInformacionNotaDebito() {
        String Informacion;
        Informacion = "<br><strong>Se seleccionó una Nota de débito,<br> para ver información deberá presionar el botón Nota de Débito</strong>";
        jEditorPane1.setText(Informacion);
        UtilTable.LimpiarTabla((DefaultTableModel) tblDetallesMonto.getModel());
    }

    public class TableRender extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable tabla, Object value, boolean isSelected, boolean focus, int row, int column) {
            if (tabla.getValueAt(row, 10).toString().equals("Anulada")) {

                setBackground(Color.decode("#d35400"));
                setForeground(Color.white);

            } else {
                setBackground(Color.decode("#F5FCFF"));
                setForeground(Color.black);
            }
            return super.getTableCellRendererComponent(tabla, value, isSelected, focus, row, column);
        }
    }

}

class ObjetoFila {

    private String cuentaRegistro;
    private String RazonSocial;
    private String Producto;
    private String Agencia;
    private String NoDeclaracion;
    private String NoFactura;
    private String Remitente;
    private String TipoTransaccion;
    private String TipoLlegada;
    private String Estado;
    private String ValorCIF;
    private String UsuarioCreador;
    private String UsuarioModificador;
    private String UsuarioImpresor;
    private String FechaCreacion;
    private String FechaModificacion;
    private String FechaImpresion;

    private String Honorario;
    private String Manejo;
    private String Valorizacion;
    private String PartidasAdicionales;
    private boolean AplicaIVA;

    private List<NotaDebitoInterna> notasDebito;

    public ObjetoFila() {
    }

    public ObjetoFila(String cuentaRegistro, String RazonSocial, String Producto, String Agencia, String NoDeclaracion, String NoFactura, String Remitente, String TipoTransaccion, String TipoLlegada, String Estado, String ValorCIF, String UsuarioCreador, String UsuarioModificador, String UsuarioImpresor, String FechaCreacion, String FechaModificacion, String FechaImpresion, String Honorario, String Manejo, String Valorizacion, String PartidasAdicionales, boolean AplicaIVA, List<NotaDebitoInterna> notasDebito) {
        this.cuentaRegistro = cuentaRegistro;
        this.RazonSocial = RazonSocial;
        this.Producto = Producto;
        this.Agencia = Agencia;
        this.NoDeclaracion = NoDeclaracion;
        this.NoFactura = NoFactura;
        this.Remitente = Remitente;
        this.TipoTransaccion = TipoTransaccion;
        this.TipoLlegada = TipoLlegada;
        this.Estado = Estado;
        this.ValorCIF = ValorCIF;
        this.UsuarioCreador = UsuarioCreador;
        this.UsuarioModificador = UsuarioModificador;
        this.UsuarioImpresor = UsuarioImpresor;
        this.FechaCreacion = FechaCreacion;
        this.FechaModificacion = FechaModificacion;
        this.FechaImpresion = FechaImpresion;
        this.Honorario = Honorario;
        this.Manejo = Manejo;
        this.Valorizacion = Valorizacion;
        this.PartidasAdicionales = PartidasAdicionales;
        this.AplicaIVA = AplicaIVA;
        this.notasDebito = notasDebito;
    }

    public String getCuentaRegistro() {
        return cuentaRegistro;
    }

    public void setCuentaRegistro(String cuentaRegistro) {
        this.cuentaRegistro = cuentaRegistro;
    }

    public String getRazonSocial() {
        return RazonSocial;
    }

    public void setRazonSocial(String RazonSocial) {
        this.RazonSocial = RazonSocial;
    }

    public String getProducto() {
        return Producto;
    }

    public void setProducto(String Producto) {
        this.Producto = Producto;
    }

    public String getAgencia() {
        return Agencia;
    }

    public void setAgencia(String Agencia) {
        this.Agencia = Agencia;
    }

    public String getNoDeclaracion() {
        return NoDeclaracion;
    }

    public void setNoDeclaracion(String NoDeclaracion) {
        this.NoDeclaracion = NoDeclaracion;
    }

    public String getNoFactura() {
        return NoFactura;
    }

    public void setNoFactura(String NoFactura) {
        this.NoFactura = NoFactura;
    }

    public String getRemitente() {
        return Remitente;
    }

    public void setRemitente(String Remitente) {
        this.Remitente = Remitente;
    }

    public String getTipoTransaccion() {
        return TipoTransaccion;
    }

    public void setTipoTransaccion(String TipoTransaccion) {
        this.TipoTransaccion = TipoTransaccion;
    }

    public String getTipoLlegada() {
        return TipoLlegada;
    }

    public void setTipoLlegada(String TipoLlegada) {
        this.TipoLlegada = TipoLlegada;
    }

    public String getEstado() {
        return Estado;
    }

    public void setEstado(String Estado) {
        this.Estado = Estado;
    }

    public String getValorCIF() {
        return ValorCIF;
    }

    public void setValorCIF(String ValorCIF) {
        this.ValorCIF = ValorCIF;
    }

    public String getUsuarioCreador() {
        return UsuarioCreador;
    }

    public void setUsuarioCreador(String UsuarioCreador) {
        this.UsuarioCreador = UsuarioCreador;
    }

    public String getUsuarioModificador() {
        return UsuarioModificador;
    }

    public void setUsuarioModificador(String UsuarioModificador) {
        this.UsuarioModificador = UsuarioModificador;
    }

    public String getUsuarioImpresor() {
        return UsuarioImpresor;
    }

    public void setUsuarioImpresor(String UsuarioImpresor) {
        this.UsuarioImpresor = UsuarioImpresor;
    }

    public String getFechaCreacion() {
        return FechaCreacion;
    }

    public void setFechaCreacion(String FechaCreacion) {
        this.FechaCreacion = FechaCreacion;
    }

    public String getFechaModificacion() {
        return FechaModificacion;
    }

    public void setFechaModificacion(String FechaModificacion) {
        this.FechaModificacion = FechaModificacion;
    }

    public String getFechaImpresion() {
        return FechaImpresion;
    }

    public void setFechaImpresion(String FechaImpresion) {
        this.FechaImpresion = FechaImpresion;
    }

    public String getHonorario() {
        return Honorario;
    }

    public void setHonorario(String Honorario) {
        this.Honorario = Honorario;
    }

    public String getManejo() {
        return Manejo;
    }

    public void setManejo(String Manejo) {
        this.Manejo = Manejo;
    }

    public String getValorizacion() {
        return Valorizacion;
    }

    public void setValorizacion(String Valorizacion) {
        this.Valorizacion = Valorizacion;
    }

    public String getPartidasAdicionales() {
        return PartidasAdicionales;
    }

    public void setPartidasAdicionales(String PartidasAdicionales) {
        this.PartidasAdicionales = PartidasAdicionales;
    }

    public boolean isAplicaIVA() {
        return AplicaIVA;
    }

    public void setAplicaIVA(boolean AplicaIVA) {
        this.AplicaIVA = AplicaIVA;
    }

    public List<NotaDebitoInterna> getNotasDebito() {
        return notasDebito;
    }

    public void setNotasDebito(List<NotaDebitoInterna> notasDebito) {
        this.notasDebito = notasDebito;
    }

}

class NotaDebitoInterna {

    private String NotaDebito;
    private String Monto;

    public NotaDebitoInterna() {
    }

    public NotaDebitoInterna(String NotaDebito, String Monto) {
        this.NotaDebito = NotaDebito;
        this.Monto = Monto;
    }

    public String getNotaDebito() {
        return NotaDebito;
    }

    public void setNotaDebito(String NotaDebito) {
        this.NotaDebito = NotaDebito;
    }

    public String getMonto() {
        return Monto;
    }

    public void setMonto(String Monto) {
        this.Monto = Monto;
    }

}
