/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InternalFrames;

import Dialogos.dlgPagar;
import POJOs.Cliente;
import POJOs.Detallenotadebito;
import POJOs.Detallerecibo;
import POJOs.Factura;
import POJOs.Notadebito;
import POJOs.Recibo;
import POJOs.Serviciosagencia;
import Utilidad.Mensajes;
import Utilidad.UtilDate;
import Utilidad.UtilTable;
import bean.ClienteBean;
import bean.DetalleNotaDebitoBean;
import bean.DetalleReciboBean;
import bean.FacturasBean;
import bean.NotaDebitoBean;
import bean.ReciboBean;
import bean.ServicioAgenciaBean;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Daniel
 */
public class ifrEstadoCuentas extends javax.swing.JInternalFrame {

    static ClienteBean clientesBean;
    static List<Cliente> clientes;

    FacturasBean facturasBean;
    List<Factura> facturas;

    ServicioAgenciaBean servicioAgenciaBean;
    List<ServicioAgenciaBean> serviciosAgencia;

    NotaDebitoBean notaDebitoBean;
    List<Notadebito> notasDebito;

    DetalleNotaDebitoBean debitoBean;
    List<Detallenotadebito> detalleNotaDebitos;

    ReciboBean reciboBean;
    List<Recibo> recibos;

    DetalleReciboBean detalleReciboBean;
    List<Detallerecibo> detalleRecibos;

    double Total, IvaTotal, DeudaTotal, PagoTotal;

    /**
     * Creates new form ifrEstadoCuentas
     */
    public ifrEstadoCuentas() {
        clientesBean = new ClienteBean();
        facturasBean = new FacturasBean();
        servicioAgenciaBean = new ServicioAgenciaBean();
        notaDebitoBean = new NotaDebitoBean();
        debitoBean = new DetalleNotaDebitoBean();
        reciboBean = new ReciboBean();
        detalleReciboBean = new DetalleReciboBean();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        cboClientes = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblClientes = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDetalleRecibo = new javax.swing.JTable();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstRecibos = new javax.swing.JList<>();
        jPanel11 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        cboMesesFiltro = new javax.swing.JComboBox<>();
        cboAnioFiltro = new javax.swing.JComboBox<>();
        rtnVerTodo = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        epEstado = new javax.swing.JEditorPane();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        epInfo = new javax.swing.JEditorPane();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("<html><Strong>ESTADO DE CUENTA DE CLIENTES");
        jPanel1.add(jLabel7);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Cliente:");
        jPanel3.add(jLabel8);

        cboClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboClientesActionPerformed(evt);
            }
        });
        jPanel3.add(cboClientes);

        jButton2.setText("Generar Recibo");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2);

        jButton3.setText("Exportación Rápida");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton3);

        jButton4.setText("Exportar Todo");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton4);

        jPanel2.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("<html><strong>Registro de Deudas del Cliente"));
        jPanel7.setLayout(new java.awt.BorderLayout());

        tblClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Declaracion", "Tipo de Deuda", "# de Registro", "Cliente", "Monto", "IVA", "Total Deuda", "Monto Pagado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblClientes.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblClientes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblClientes.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblClientes);
        tblClientes.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tblClientes.getColumnModel().getColumnCount() > 0) {
            tblClientes.getColumnModel().getColumn(0).setPreferredWidth(100);
            tblClientes.getColumnModel().getColumn(1).setPreferredWidth(120);
            tblClientes.getColumnModel().getColumn(2).setPreferredWidth(100);
            tblClientes.getColumnModel().getColumn(3).setPreferredWidth(80);
            tblClientes.getColumnModel().getColumn(4).setPreferredWidth(150);
            tblClientes.getColumnModel().getColumn(5).setPreferredWidth(80);
            tblClientes.getColumnModel().getColumn(6).setPreferredWidth(80);
            tblClientes.getColumnModel().getColumn(7).setPreferredWidth(80);
            tblClientes.getColumnModel().getColumn(8).setPreferredWidth(80);
        }

        jPanel7.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel7);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("<html><strong>Registro de Pagos del Cliente"));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel10.setLayout(new java.awt.BorderLayout());

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("<html><strong>Detalles del Recibo"));
        jPanel9.setLayout(new java.awt.BorderLayout());

        tblDetalleRecibo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Cuenta de Registro", "Nota de Débito", "Monto", "Usuario Creacion", "Fecha Creacion", "Usuario Modificacion", "Fecha Modificacion"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDetalleRecibo.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblDetalleRecibo.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblDetalleRecibo);
        if (tblDetalleRecibo.getColumnModel().getColumnCount() > 0) {
            tblDetalleRecibo.getColumnModel().getColumn(0).setPreferredWidth(120);
            tblDetalleRecibo.getColumnModel().getColumn(1).setPreferredWidth(120);
            tblDetalleRecibo.getColumnModel().getColumn(2).setPreferredWidth(80);
            tblDetalleRecibo.getColumnModel().getColumn(3).setPreferredWidth(120);
            tblDetalleRecibo.getColumnModel().getColumn(4).setPreferredWidth(100);
            tblDetalleRecibo.getColumnModel().getColumn(5).setPreferredWidth(120);
            tblDetalleRecibo.getColumnModel().getColumn(6).setPreferredWidth(100);
        }

        jPanel9.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel10.add(jPanel9, java.awt.BorderLayout.CENTER);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("<html><strong>Recibos"));
        jPanel12.setPreferredSize(new java.awt.Dimension(180, 130));
        jPanel12.setLayout(new java.awt.BorderLayout());

        lstRecibos.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstRecibosValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(lstRecibos);

        jPanel12.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel10.add(jPanel12, java.awt.BorderLayout.WEST);

        jPanel8.add(jPanel10, java.awt.BorderLayout.CENTER);

        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT);
        flowLayout1.setAlignOnBaseline(true);
        jPanel11.setLayout(flowLayout1);

        jLabel6.setText("Ver:");
        jPanel11.add(jLabel6);

        cboMesesFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Enero" }));
        jPanel11.add(cboMesesFiltro);

        cboAnioFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2016" }));
        jPanel11.add(cboAnioFiltro);

        rtnVerTodo.setText("Ver Todo");
        jPanel11.add(rtnVerTodo);

        jButton1.setText("Actualizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel11.add(jButton1);

        jButton5.setText("Exportar Recibos");
        jButton5.setToolTipText("Exporta los recibos del mes y el año seleccionado");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel11.add(jButton5);

        jPanel8.add(jPanel11, java.awt.BorderLayout.NORTH);

        jPanel5.add(jPanel8);

        jPanel4.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel4, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setResizeWeight(0.55);
        jSplitPane1.setMinimumSize(new java.awt.Dimension(200, 150));

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("<html><strong>Resumen"));
        jPanel14.setPreferredSize(new java.awt.Dimension(200, 45));
        jPanel14.setLayout(new java.awt.BorderLayout());

        epEstado.setEditable(false);
        epEstado.setContentType("text/html"); // NOI18N
        jScrollPane4.setViewportView(epEstado);

        jPanel14.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel14);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("<html><strong>Info. del Recibo"));
        jPanel13.setPreferredSize(new java.awt.Dimension(200, 100));
        jPanel13.setLayout(new java.awt.BorderLayout());

        epInfo.setEditable(false);
        epInfo.setContentType("text/html"); // NOI18N
        jScrollPane5.setViewportView(epInfo);

        jPanel13.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel13);

        jPanel6.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel6, java.awt.BorderLayout.WEST);

        setBounds(0, 0, 965, 499);
    }// </editor-fold>//GEN-END:initComponents

    private void cboClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboClientesActionPerformed
        Total = 0;
        IvaTotal = 0;
        DeudaTotal = 0;
        PagoTotal = 0;
        if (cboClientes.getItemCount() > 0) {
            CargarTabla();
            CargarCombos();
            CargarListadoRecibos();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_cboClientesActionPerformed

    private void lstRecibosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstRecibosValueChanged
        if (!lstRecibos.isSelectionEmpty()) {
            CargarDetalles(lstRecibos.getSelectedIndex());
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_lstRecibosValueChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        CargarListadoRecibos();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (cboClientes.getSelectedIndex() != -1) {
            if (tblClientes.getRowCount() > 0) {
                new dlgPagar(JOptionPane.getFrameForComponent(this), true, clientes.get(cboClientes.getSelectedIndex()).getIdCliente()).setVisible(true);
            } else {
                Mensajes.InfoMessage(this, "Atención", "El cliente no posee cuentas pendientes a pagar, por lo tanto no se puede generar ningun recibo");
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        CargarClientes();
        // TODO add your handling code here:
    }//GEN-LAST:event_formInternalFrameOpened

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (tblClientes.getRowCount() > 0) {
            UtilTable.Exportar(this, tblClientes);
        } else {
            Mensajes.InfoMessage(this, "Atención", "No existen registros que exportar");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        JTable tabla = CrearTabla();

        if (tabla.getRowCount() > 0) {
            UtilTable.Exportar(this, tabla);
        } else {
            Mensajes.InfoMessage(this, "Atención", "No existen registros que exportar");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        JTable tabla = CrearTablaRecibos();

        if (tabla.getRowCount() > 0) {
            UtilTable.Exportar(this, tabla);
        } else {
            Mensajes.InfoMessage(this, "Atención", "No existen registros que exportar");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JComboBox<String> cboAnioFiltro;
    private static javax.swing.JComboBox<String> cboClientes;
    private static javax.swing.JComboBox<String> cboMesesFiltro;
    private javax.swing.JEditorPane epEstado;
    private javax.swing.JEditorPane epInfo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JList<String> lstRecibos;
    private static javax.swing.JCheckBox rtnVerTodo;
    private javax.swing.JTable tblClientes;
    private javax.swing.JTable tblDetalleRecibo;
    // End of variables declaration//GEN-END:variables

    public static void CargarClientes() {
        int IndexSelected = 0;
        if (cboClientes.getSelectedIndex() != -1) {
            IndexSelected = cboClientes.getSelectedIndex();
        }
        cboClientes.removeAllItems();
        clientes = clientesBean.FindAll(true);

        for (Cliente cliente : clientes) {
            cboClientes.addItem(cliente.getRazonSocial());
            System.out.println(cliente.getRazonSocial());
        }

        if (cboClientes.getItemCount() > 0) {
            cboClientes.setSelectedIndex(IndexSelected);
        }
    }

    private void CargarTabla() {
        DefaultTableModel modelo = (DefaultTableModel) tblClientes.getModel();
        UtilTable.LimpiarTabla(modelo);

        facturas = facturasBean.ObtenerFacturasClientes(clientes.get(cboClientes.getSelectedIndex()).getIdCliente());
        double MontoCR = 0, Iva = 0, MontoPagadoCR = 0, MontoPagadoND = 0, TotalPagadoND = 0;
        for (Factura f : facturas) {
            MontoCR = 0;
            Iva = 0;
            MontoPagadoCR = 0;
            MontoPagadoND = 0;
            TotalPagadoND = 0;

            if (f.getEstado().equals("Impresa") || f.getEstado().equals("Impresa con ND")) {
                Serviciosagencia sa = servicioAgenciaBean.FindById(f.getCuentaRegistro());
                if (sa == null) {
                    MontoCR = 0.00;
                    Iva = 0.00;
                } else {
                    MontoCR = sa.getHonorario() + sa.getManejo() + sa.getPartidasAdicionales() + sa.getValorizacion();
                    if (sa.getAplicaIva()) {
                        Iva = MontoCR * 0.15;
                    }
                }

                MontoPagadoCR = detalleReciboBean.MontoPagado(true, f.getCuentaRegistro());

                modelo.addRow(new Object[]{
                    f.getFechaImpresion(),
                    f.getNumeroDeclaracion(),
                    "Cuenta de Registro",
                    f.getCuentaRegistro(),
                    cboClientes.getSelectedItem().toString(),
                    String.format("%,.2f", MontoCR),
                    String.format("%,.2f", Iva),
                    String.format("%,.2f", (MontoCR + Iva)),
                    String.format("%,.2f", MontoPagadoCR)});

            }
            notasDebito = notaDebitoBean.FindAll(f.getCuentaRegistro());
            if (!notasDebito.isEmpty()) {
                for (Notadebito nd : notasDebito) {
                    if (nd.getEstado().equals("Impresa")) {
                        detalleNotaDebitos = debitoBean.FindAll(nd.getNotaDebito());
                        double MontoND = 0.00;
                        if (!detalleNotaDebitos.isEmpty()) {
                            for (Detallenotadebito dnd : detalleNotaDebitos) {
                                MontoND = MontoND + dnd.getMonto();
                            }
                        }

                        MontoPagadoND = detalleReciboBean.MontoPagado(false, nd.getNotaDebito());
                        TotalPagadoND = TotalPagadoND + MontoPagadoND;
                        modelo.addRow(new Object[]{
                            nd.getFechaImpresion(),
                            f.getNumeroDeclaracion(),
                            "Nota de Débito",
                            nd.getNotaDebito(),
                            cboClientes.getSelectedItem().toString(),
                            String.format("%,.2f", MontoND),
                            0.00,
                            String.format("%,.2f", MontoND),
                            String.format("%,.2f", MontoPagadoND)});
                        MontoCR = MontoCR + MontoND;
                    }
                }
            }

            Total = Total + MontoCR;
            IvaTotal = IvaTotal + Iva;
            PagoTotal = PagoTotal + TotalPagadoND + MontoPagadoCR;
        }

        //NUEVO AGREGADO PARA PODER OBTENER LAS NOTAS DE DEBITO QUE NO SON ASOCIADAS A CUENTAS DE REGISTRO PERO SI A UN CLIENTE
        notasDebito = null;
        MontoCR = 0;

        MontoPagadoND = 0;
        TotalPagadoND = 0;

        notasDebito = notaDebitoBean.FindAllCliente(clientes.get(cboClientes.getSelectedIndex()).getIdCliente());
        if (!notasDebito.isEmpty()) {
            for (Notadebito nd : notasDebito) {
                if (nd.getEstado().equals("Impresa")) {
                    detalleNotaDebitos = debitoBean.FindAll(nd.getNotaDebito());
                    double MontoND = 0.00;
                    if (!detalleNotaDebitos.isEmpty()) {
                        for (Detallenotadebito dnd : detalleNotaDebitos) {
                            MontoND = MontoND + dnd.getMonto();
                        }
                    }

                    MontoPagadoND = detalleReciboBean.MontoPagado(false, nd.getNotaDebito());
                    TotalPagadoND = TotalPagadoND + MontoPagadoND;
                    modelo.addRow(new Object[]{
                        nd.getFechaImpresion(),
                        "",
                        "Nota de Débito",
                        nd.getNotaDebito(),
                        cboClientes.getSelectedItem().toString(),
                        String.format("%,.2f", MontoND),
                        0.00,
                        String.format("%,.2f", MontoND),
                        String.format("%,.2f", MontoPagadoND)});
                    MontoCR = MontoCR + MontoND;
                }
            }
            Total = Total + MontoCR;
            PagoTotal = PagoTotal + TotalPagadoND;
        }

        CargarEstado();
    }

    private void CargarListadoRecibos() {
        UtilTable.LimpiarTabla(tblDetalleRecibo);
        if (cboClientes.getSelectedIndex() != -1) {
            int Mes = -1;
            try {
                if (!rtnVerTodo.isSelected()) {
                    Mes = UtilDate.IntegerFromMes(cboMesesFiltro.getSelectedItem().toString());
                }
            } catch (NullPointerException e) {
                Mes = -1;
            }

            try {
                recibos = reciboBean.FindAll(clientes.get(cboClientes.getSelectedIndex()).getIdCliente(), Mes, Integer.parseInt(cboAnioFiltro.getSelectedItem().toString()));
                DefaultListModel modelo = new DefaultListModel<>();
                for (Recibo recibo : recibos) {
                    modelo.addElement("No." + recibo.getNoRecibo() + "      Monto: C$" + String.format("%,.2f", reciboBean.MontoRecibo(recibo.getNoRecibo())));
                }
                lstRecibos.setModel(modelo);
                epInfo.setText("");
            } catch (NullPointerException e) {
            }
        }
    }

    private JTable CrearTablaRecibos() {
        recibos = reciboBean.FindAll(-1, UtilDate.IntegerFromMes(cboMesesFiltro.getSelectedItem().toString()), Integer.parseInt(cboAnioFiltro.getSelectedItem().toString()));
        DefaultTableModel modelo = new DefaultTableModel();
        String[] Columns = new String[7];

        Columns[0] = "CLIENTE";
        Columns[1] = "FECHA DE PAGO";
        Columns[2] = "NO.RECIBO";
        Columns[3] = "MONTO";
        Columns[4] = "IMI";
        Columns[5] = "IR";
        Columns[6] = "TOTAL";

        modelo.setColumnIdentifiers(Columns);
        for (Recibo r : recibos) {
            modelo.addRow(new Object[]{
                clientesBean.FindById(r.getCliente().getIdCliente()).getRazonSocial().toUpperCase(),
                UtilDate.DateFullNicaragua(r.getFechaCreacion()),
                r.getNoRecibo(),
                r.getMonto(),
                r.getImi(),
                r.getIr(),
                (r.getMonto() + r.getImi() + r.getIr())
            });
        }
        JTable jtable = new JTable();
        jtable.setModel(modelo);
        return jtable;
    }

    private void CargarCombos() {
        cboAnioFiltro.removeAllItems();
        cboMesesFiltro.removeAllItems();
        for (Integer entero : reciboBean.ObtenerMesesAnios(true)) {
            cboMesesFiltro.addItem(UtilDate.MesFromInteger(entero));
        }
        for (Integer entero : reciboBean.ObtenerMesesAnios(false)) {
            cboAnioFiltro.addItem(entero.toString());
        }
        cboMesesFiltro.setSelectedItem(UtilDate.MesActual());
    }

    private void CargarDetalles(int index) {
        DefaultTableModel modelo = (DefaultTableModel) tblDetalleRecibo.getModel();
        detalleRecibos = detalleReciboBean.FindAll(recibos.get(index).getNoRecibo());
        UtilTable.LimpiarTabla(modelo);
        for (Detallerecibo dr : detalleRecibos) {
            modelo.addRow(new Object[]{
                dr.getFactura() == null ? "" : dr.getFactura().getCuentaRegistro(),
                dr.getNotadebito() == null ? "" : dr.getNotadebito().getNotaDebito(),
                String.format("%,.2f", dr.getMonto()),
                dr.getUserCreacion(),
                dr.getFechaCreacion(),
                dr.getUserModificacion(),
                dr.getFechaModificacion()
            });
        }

        CargarInfoRecibo(recibos.get(index));
    }

    private void CargarEstado() {
        String Informacion = "Total Deuda sin IVA: <br><strong>C$ " + String.format("%,.2f", Total)
                + "</strong><br>IVA Total: <br><strong>C$ " + String.format("%,.2f", IvaTotal)
                + "</strong><br>Total Deuda: <br><strong>C$ " + String.format("%,.2f", (Total + IvaTotal))
                + "</strong><br>Total Pagado: <br><strong>C$ " + String.format("%,.2f", PagoTotal)
                + "</strong><br>Total Pendiente: <br><strong>C$ " + String.format("%,.2f", (Total + IvaTotal - PagoTotal))
                + "</strong>";
        epEstado.setText(Informacion);
    }

    private void CargarInfoRecibo(Recibo r) {

        String Informacion = "Fecha de Creacion: <strong>" + r.getFechaCreacion()
                + "</strong> <br>Usuario Creador: <strong>" + r.getUsuarioByUserCreacion().getIdUsuario()
                + "</strong> <br><br>Ultima Modificacion: <strong>" + r.getFechaModificacion()
                + "</strong> <br>Usuario que Modifico: <strong>" + r.getUsuarioByUserModificacion().getIdUsuario()
                + "</strong> <br><br>Monto Físico: <strong>C$" + String.format("%,.2f", r.getMonto())
                + "</strong> <br>IMI (1%): <strong>C$" + String.format("%,.2f", r.getImi())
                + "</strong> <br>IR (2%): <strong>C$" + String.format("%,.2f", r.getIr())
                + "</strong> <br>Total: <strong>C$" + String.format("%,.2f", (r.getMonto() + r.getImi() + r.getIr()));
        epInfo.setText(Informacion);
    }

    private JTable CrearTabla() {
        JTable jtable = new JTable();
        DefaultTableModel modelo = new DefaultTableModel();
        String[] Columns = new String[tblClientes.getColumnCount()];
        for (int i = 0; i < tblClientes.getColumnCount(); i++) {
            Columns[i] = tblClientes.getColumnName(i);
        }
        modelo.setColumnIdentifiers(Columns);

        int IndexSelected = cboClientes.getSelectedIndex();
        for (int i = 0; i < cboClientes.getItemCount(); i++) {
            cboClientes.setSelectedIndex(i);
            CargarTabla();
            if (tblClientes.getModel().getRowCount() > 0) {
                for (int j = 0; j < tblClientes.getModel().getRowCount(); j++) {
                    Object[] DataRow = new Object[tblClientes.getColumnCount()];
                    for (int k = 0; k < tblClientes.getColumnCount(); k++) {
                        DataRow[k] = tblClientes.getValueAt(j, k);
                    }
                    modelo.addRow(DataRow);
                }
            }
        }
        jtable.setModel(modelo);
        cboClientes.setSelectedIndex(IndexSelected);
        CargarTabla();
        return jtable;
    }
}
