/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Dialogos;

import Conexion.Dbcontext;
import Conexion.SessionHelper;
import InternalFrames.ifrRegistroFacturas;
import POJOs.Agencia;
import POJOs.Cliente;
import POJOs.Detallenotadebito;
import POJOs.Factura;
import POJOs.Notadebito;
import POJOs.Registrosanulados;
import Reportes.Reporte;
import Utilidad.Mensajes;
import Utilidad.UtilTable;
import bean.AgenciaBean;
import bean.ClienteBean;
import bean.DetalleNotaDebitoBean;
import bean.FacturasBean;
import bean.NotaDebitoBean;
import bean.RegistrosAnuladosBean;
import bean.UsuarioBean;
import java.awt.event.ItemEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Daniel-Zamora
 */
public class dlgNotaDebito extends javax.swing.JDialog {

    static NotaDebitoBean notaDebitoBean = new NotaDebitoBean();
    DetalleNotaDebitoBean detalleNotaDebitoBean = new DetalleNotaDebitoBean();
    RegistrosAnuladosBean registrosAnuladosBean = new RegistrosAnuladosBean();
    FacturasBean facturaBean = new FacturasBean();
    UsuarioBean usuarioBean = new UsuarioBean();

    List<Registrosanulados> registrosAnulados;
    Registrosanulados regAnulados;

    static List<Notadebito> notadDebito;
    Notadebito notaDebito;
    static int idRegistro;
    int NotaDebitoTemp;
    static int NotaDebitoParam;
    String UltimoIdGuardado;
    String EstadoCR;
    List<Detallenotadebito> listaDetalles;
    Detallenotadebito detalleNotaDebito;
    private static boolean isNDCliente;
    static double MontoTotalND = 0;
    static boolean IsActive = false;

    /**
     * Creates new form dlgNotaDebito
     *
     * @param parent
     * @param modal
     */
    public dlgNotaDebito(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        IsActive = true;
    }

    public dlgNotaDebito(java.awt.Frame parent, boolean modal, int IdRegistro, int NotaDebitoParam1, String EstadoOrCliente, boolean isNDClienteParam) {
        super(parent, modal);
        idRegistro = IdRegistro;
        NotaDebitoParam = NotaDebitoParam1;
        isNDCliente = isNDClienteParam;
        initComponents();
        if (isNDCliente) {
            this.EstadoCR = "";
            lblTitulo.setText("<html><Strong>NOTAS DE DEBITOS ASOCIADAS AL CLIENTE #" + EstadoOrCliente);
        } else {
            this.EstadoCR = EstadoOrCliente;
            lblTitulo.setText("<html><Strong>NOTAS DE DEBITOS ASOCIADAS A LA CUENTA DE REGISTRO #" + IdRegistro);
            if (EstadoOrCliente.equalsIgnoreCase("Impresa con ND") || EstadoOrCliente.equalsIgnoreCase("Anulada") || EstadoOrCliente.equalsIgnoreCase("Pagada")) {
                DesabilitarTodo();
            }
        }

        tblDetallesND.getSelectionModel().addListSelectionListener((ListSelectionEvent e) -> {
            jTable1SelectionChanged(e);
        });

        IsActive = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel4 = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel13 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ediInfoDetalle = new javax.swing.JEditorPane();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        ediInfoND = new javax.swing.JEditorPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblSubTotal = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblDetallesND = new javax.swing.JTable();
        jPanel20 = new javax.swing.JPanel();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        btnNotaDebito = new javax.swing.JButton();
        btnPreview = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btnAnular = new javax.swing.JButton();
        jPanel19 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        cboNotaDebito = new javax.swing.JComboBox<>();
        jPanel22 = new javax.swing.JPanel();
        lblEstadoND = new javax.swing.JLabel();

        jMenuItem1.setText("Eliminar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setDividerSize(0);
        jSplitPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSplitPane1.setMinimumSize(new java.awt.Dimension(0, 0));
        jSplitPane1.setPreferredSize(new java.awt.Dimension(204, 109));

        jPanel4.setMinimumSize(new java.awt.Dimension(240, 240));
        jPanel4.setPreferredSize(new java.awt.Dimension(240, 240));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jSplitPane2.setDividerLocation(250);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setResizeWeight(0.5);

        jPanel13.setLayout(new java.awt.BorderLayout());

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("<html><strong>Información del Detalle"));
        jPanel8.setMinimumSize(new java.awt.Dimension(700, 105));
        jPanel8.setPreferredSize(new java.awt.Dimension(700, 105));
        jPanel8.setLayout(new java.awt.BorderLayout());

        ediInfoDetalle.setEditable(false);
        ediInfoDetalle.setContentType("text/html"); // NOI18N
        jScrollPane2.setViewportView(ediInfoDetalle);

        jPanel8.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel8, java.awt.BorderLayout.CENTER);

        jSplitPane2.setRightComponent(jPanel13);

        jPanel14.setLayout(new java.awt.BorderLayout());

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("<html><strong>Información ND"));
        jPanel15.setLayout(new java.awt.BorderLayout());

        ediInfoND.setEditable(false);
        ediInfoND.setContentType("text/html"); // NOI18N
        jScrollPane5.setViewportView(ediInfoND);

        jPanel15.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jPanel14.add(jPanel15, java.awt.BorderLayout.CENTER);

        jSplitPane2.setLeftComponent(jPanel14);

        jPanel4.add(jSplitPane2, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel4);

        jPanel3.setMinimumSize(new java.awt.Dimension(588, 400));
        jPanel3.setPreferredSize(new java.awt.Dimension(100, 400));
        jPanel3.setLayout(new java.awt.BorderLayout());

        lblTitulo.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitulo.setText("<html><Strong>NOTAS DE DEBITOS ASOCIADAS A LA CUENTA DE REGISTRO #0000");
        jPanel1.add(lblTitulo);

        jPanel3.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jPanel2.add(jPanel17);

        jPanel16.setLayout(new javax.swing.BoxLayout(jPanel16, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel18.setLayout(new java.awt.GridLayout(1, 0));

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 10)); // NOI18N
        jLabel2.setText("Total Nota Individual");
        jLabel2.setPreferredSize(new java.awt.Dimension(63, 23));
        jPanel18.add(jLabel2);

        lblSubTotal.setFont(new java.awt.Font("Lucida Grande", 1, 10)); // NOI18N
        lblSubTotal.setText("---");
        jPanel18.add(lblSubTotal);

        jPanel16.add(jPanel18);

        jPanel21.setLayout(new java.awt.GridLayout(1, 0));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 11)); // NOI18N
        jLabel1.setText("Total por CR:");
        jPanel21.add(jLabel1);

        lblTotal.setFont(new java.awt.Font("Lucida Grande", 1, 11)); // NOI18N
        lblTotal.setText("---");
        jPanel21.add(lblTotal);

        jPanel16.add(jPanel21);

        jPanel2.add(jPanel16);

        jPanel7.add(jPanel2, java.awt.BorderLayout.SOUTH);

        jPanel9.setLayout(new java.awt.BorderLayout());

        tblDetallesND.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IdDetalleNotaDebito", "Concepto", "Cantidad", "userCreacion", "FechaCreacion", "userModificacion", "FechaModificacion", "CuentaRegistro"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDetallesND.setColumnSelectionAllowed(true);
        tblDetallesND.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblDetallesND.getTableHeader().setReorderingAllowed(false);
        tblDetallesND.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDetallesNDMouseClicked(evt);
            }
        });
        tblDetallesND.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tblDetallesNDPropertyChange(evt);
            }
        });
        jScrollPane4.setViewportView(tblDetallesND);
        tblDetallesND.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tblDetallesND.getColumnModel().getColumnCount() > 0) {
            tblDetallesND.getColumnModel().getColumn(0).setMinWidth(0);
            tblDetallesND.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblDetallesND.getColumnModel().getColumn(0).setMaxWidth(0);
            tblDetallesND.getColumnModel().getColumn(1).setPreferredWidth(120);
            tblDetallesND.getColumnModel().getColumn(3).setMinWidth(0);
            tblDetallesND.getColumnModel().getColumn(3).setPreferredWidth(0);
            tblDetallesND.getColumnModel().getColumn(3).setMaxWidth(0);
            tblDetallesND.getColumnModel().getColumn(4).setMinWidth(0);
            tblDetallesND.getColumnModel().getColumn(4).setPreferredWidth(0);
            tblDetallesND.getColumnModel().getColumn(4).setMaxWidth(0);
            tblDetallesND.getColumnModel().getColumn(5).setMinWidth(0);
            tblDetallesND.getColumnModel().getColumn(5).setPreferredWidth(0);
            tblDetallesND.getColumnModel().getColumn(5).setMaxWidth(0);
            tblDetallesND.getColumnModel().getColumn(6).setMinWidth(0);
            tblDetallesND.getColumnModel().getColumn(6).setPreferredWidth(0);
            tblDetallesND.getColumnModel().getColumn(6).setMaxWidth(0);
            tblDetallesND.getColumnModel().getColumn(7).setMinWidth(0);
            tblDetallesND.getColumnModel().getColumn(7).setPreferredWidth(0);
            tblDetallesND.getColumnModel().getColumn(7).setMaxWidth(0);
        }

        jPanel9.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jPanel20.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel20.setLayout(new javax.swing.BoxLayout(jPanel20, javax.swing.BoxLayout.Y_AXIS));

        btnAgregar.setText("Agregar");
        btnAgregar.setToolTipText("Agrega un nuevo detalle a la tabla");
        btnAgregar.setMaximumSize(new java.awt.Dimension(104, 29));
        btnAgregar.setMinimumSize(new java.awt.Dimension(104, 29));
        btnAgregar.setPreferredSize(new java.awt.Dimension(104, 29));
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        jPanel20.add(btnAgregar);

        btnEliminar.setText("Eliminar");
        btnEliminar.setToolTipText("Elimina el detalle seleccionado de la tabla");
        btnEliminar.setMaximumSize(new java.awt.Dimension(104, 29));
        btnEliminar.setMinimumSize(new java.awt.Dimension(104, 29));
        btnEliminar.setPreferredSize(new java.awt.Dimension(104, 29));
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel20.add(btnEliminar);

        btnGuardar.setText("Modificar");
        btnGuardar.setToolTipText("Guarda/Modifica los registros");
        btnGuardar.setMaximumSize(new java.awt.Dimension(104, 29));
        btnGuardar.setMinimumSize(new java.awt.Dimension(104, 29));
        btnGuardar.setPreferredSize(new java.awt.Dimension(104, 29));
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel20.add(btnGuardar);

        btnCancelar.setText("Cancelar");
        btnCancelar.setToolTipText("Cancela las acciones realizadas");
        btnCancelar.setMaximumSize(new java.awt.Dimension(104, 29));
        btnCancelar.setMinimumSize(new java.awt.Dimension(104, 29));
        btnCancelar.setPreferredSize(new java.awt.Dimension(104, 29));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel20.add(btnCancelar);

        jPanel9.add(jPanel20, java.awt.BorderLayout.EAST);

        jPanel7.add(jPanel9, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel10.setLayout(new java.awt.BorderLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("<html><strong>Acciones"));

        btnNotaDebito.setText("Crear Nueva Nota de Débito");
        btnNotaDebito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNotaDebitoActionPerformed(evt);
            }
        });
        jPanel6.add(btnNotaDebito);

        btnPreview.setText("Vista Previa");
        btnPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviewActionPerformed(evt);
            }
        });
        jPanel6.add(btnPreview);

        btnImprimir.setText("Generar Arch. Impresión");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });
        jPanel6.add(btnImprimir);

        btnAnular.setText("Anular");
        btnAnular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnularActionPerformed(evt);
            }
        });
        jPanel6.add(btnAnular);

        jPanel10.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder("<html><strong>Notas de Debito Asociadas"));
        jPanel19.setLayout(new java.awt.BorderLayout());

        jPanel11.setLayout(new java.awt.BorderLayout());

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel6.setText("Nota de Débito Número:");
        jPanel12.add(jLabel6);

        cboNotaDebito.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Vacío>" }));
        cboNotaDebito.setSelectedIndex(-1);
        cboNotaDebito.setToolTipText("");
        cboNotaDebito.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboNotaDebitoItemStateChanged(evt);
            }
        });
        cboNotaDebito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboNotaDebitoActionPerformed(evt);
            }
        });
        jPanel12.add(cboNotaDebito);

        jPanel11.add(jPanel12, java.awt.BorderLayout.WEST);

        lblEstadoND.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        lblEstadoND.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel22.add(lblEstadoND);

        jPanel11.add(jPanel22, java.awt.BorderLayout.CENTER);

        jPanel19.add(jPanel11, java.awt.BorderLayout.CENTER);

        jPanel10.add(jPanel19, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel10, java.awt.BorderLayout.NORTH);

        jPanel3.add(jPanel5, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel3);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(1079, 594));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cboNotaDebitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboNotaDebitoActionPerformed
//        if (cboNotaDebito.getSelectedIndex() != -1 && !cboNotaDebito.getSelectedItem().toString().equals("<Vacío>")) {
//            System.out.println(cboNotaDebito.getSelectedIndex()+" " +cboNotaDebito.getSelectedItem().toString());
//            try {
//                CargarInformacionND();
//                NotaDebitoTemp = Integer.parseInt(cboNotaDebito.getSelectedItem().toString());
//            } catch (NumberFormatException e) {
//                UtilTable.LimpiarTabla(tblDetallesND);
//                ObjetoVacioCombo();
//            }
//
//        }
        // TODO add your handling code here:
    }//GEN-LAST:event_cboNotaDebitoActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        CargarCombo();
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    private void btnNotaDebitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNotaDebitoActionPerformed
        cboNotaDebito.setEnabled(false);
        btnImprimir.setEnabled(false);
        btnPreview.setEnabled(false);
        btnAnular.setEnabled(false);
        btnGuardar.setText("Guardar");
        lblEstadoND.setText("<html><Strong>Generando ND " + notaDebitoBean.NotaDebitoConsecutiva());
        TablaEditable(true);
        InsertarValoresPorDefecto();
        BotonesActivos(true);
        PonerEnEspera();

        // TODO add your handling code here:
    }//GEN-LAST:event_btnNotaDebitoActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        if (tblDetallesND.getRowCount() < 15) {
            InsertarValorTabla();
            BotonesAccion(true);
        } else {
            Mensajes.WarningMessage(this, "Ha alcanzado el Máximo de detalles permitidos", "Para una mejor experiencia al momento de imprimir se ha delimitado un número máximo de 15 registros, \nya no es posible agregar un nuevo detalle a esta nota de débito");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        if (UtilTable.isAnyoneSelected(tblDetallesND)) {
            UtilTable.RemoveRow(tblDetallesND);
            BotonesAccion(true);
            if (tblDetallesND.getModel().getRowCount() > 0) {
                tblDetallesND.setRowSelectionInterval(0, 0);
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        try {
            int DecisionFinal = JOptionPane.showConfirmDialog(this, "Realmente desea cancelar?, Se perderán los cambios.", "Mensaje de Confirmacion", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (DecisionFinal == 0) {
                if (isNDCliente) {
                    cboNotaDebito.setEnabled(false);
                } else {
                    cboNotaDebito.setEnabled(true);
                }

                btnGuardar.setText("Modificar");
                cboNotaDebitoActionPerformed(evt); // Llamo al evento para que cargue los detalles de la nota de debito que estaba seleccionada
                BotonesAccion(false);
            }
        } catch (NumberFormatException e) {
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        if (tblDetallesND.isEditing()) {
            JOptionPane.showMessageDialog(this, "Hemos detectado que aún se encuentra una fila en edición, debe terminar la edición para continuar", "Advertencia", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (ValidarFilasTabla()) { //valido que la cantidad de filas de la tabla no sea 0
            if (ValidarValoresVacios()) { //valido que en la tabla no hayan valores vacios
                if (btnGuardar.getText().equals("Guardar")) {
                    int DecisionFinal = JOptionPane.showConfirmDialog(this, Mensajes.CONFIRMA_INSERSION, "Mensaje de Confirmacion", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (DecisionFinal == 0) {
                        if (GuardarNotaDebito()) {
                            if (GuardarDetallesNotaDebito()) {
                                Mensajes.OperacionExitosa(this);
                                if (isNDCliente) {
                                    cboNotaDebito.setEnabled(false);
                                } else {
                                    cboNotaDebito.setEnabled(true);
                                }
                                CargarCombo();
                                cboNotaDebito.setSelectedItem(UltimoIdGuardado);
                                btnGuardar.setText("Modificar");
                                if (ifrRegistroFacturas.RegistroFacturasActiva) {
                                    ifrRegistroFacturas.CargarTabla();
                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, Mensajes.ERROR_GESTIONINFO, "Operacion Incompleta", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                } else {
                    int DecisionFinal = JOptionPane.showConfirmDialog(this, Mensajes.CONFIRMA_ACTUALIZACION, "Mensaje de Confirmacion", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (DecisionFinal == 0) {
                        if (EditarDetallesNotaDebito()) {
                            Mensajes.OperacionExitosa(this);
                            if (isNDCliente) {
                                cboNotaDebito.setEnabled(false);
                            } else {
                                cboNotaDebito.setEnabled(true);
                            }
                            int SeleccionCombo = cboNotaDebito.getSelectedIndex();
                            CargarCombo();
                            cboNotaDebito.setSelectedIndex(SeleccionCombo);
                            if (ifrRegistroFacturas.RegistroFacturasActiva) {
                                ifrRegistroFacturas.CargarTabla();
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, Mensajes.ERROR_GESTIONINFO, "Operacion Incompleta", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Compruebe que las filas no tienen celdas vacías, o que no existan cantidades en Cero", "Información Incompleta", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "La Nota de Débito debe contener al menos un Detalle", "Información no registrada", JOptionPane.WARNING_MESSAGE);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void tblDetallesNDPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tblDetallesNDPropertyChange
        if (tblDetallesND.isEditing()) {
            BotonesAccion(true);
            ediInfoDetalle.setText("<br><br><br><br><br><br><strong><center>--Información no disponible--");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_tblDetallesNDPropertyChange

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
//        if (!EstadoCR.equals("Impresa") && !EstadoCR.equals("Impresa con ND") && !EstadoCR.equals("Anulada") && !EstadoCR.equals("Pagada")) {
//            JOptionPane.showMessageDialog(this, "No se puede Generar el Archivo de Impresión de la Nota de Débito mientras no sea impresa su Cuenta de Registro asociada", "No se puede completar la acción", JOptionPane.WARNING_MESSAGE);
//            return;
//        }
        if (lblEstadoND.getText().substring(25).equalsIgnoreCase("GENERADA")) {
            int DecisionFinal = JOptionPane.showConfirmDialog(this, "Se generará el archivo final de la Nota de Débito, \nal realizar esta acción se cambiará su estado a 'IMPRESA' \nEsto provocará que no sea posible seguir editandola. \nRealmente desea continuar?", "Mensaje de Confirmacion", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (DecisionFinal == 0) {
                Imprimir(false);
                if (ifrRegistroFacturas.RegistroFacturasActiva) {
                    ifrRegistroFacturas.CargarTabla();

                    if (isNDCliente) {
                        ifrRegistroFacturas.CargarNotasDebito();
                    }
                }

            }
        } else {
            Imprimir(false);
            if (ifrRegistroFacturas.RegistroFacturasActiva) {
                ifrRegistroFacturas.CargarTabla();

                if (isNDCliente) {
                    ifrRegistroFacturas.CargarNotasDebito();
                }
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnAnularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnularActionPerformed

        new dlgAnular(JOptionPane.getFrameForComponent(this), true, "Nota de Débito", Integer.parseInt(cboNotaDebito.getSelectedItem().toString())).setVisible(true);

        // TODO add your handling code here:
    }//GEN-LAST:event_btnAnularActionPerformed

    private void tblDetallesNDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDetallesNDMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON3) {
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_tblDetallesNDMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if (UtilTable.isAnyoneSelected(tblDetallesND)) {
            UtilTable.RemoveRow(tblDetallesND);
            BotonesAccion(true);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void btnPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviewActionPerformed
        Imprimir(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPreviewActionPerformed

    private void cboNotaDebitoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboNotaDebitoItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (cboNotaDebito.getSelectedIndex() != -1 && !cboNotaDebito.getSelectedItem().toString().equals("<Vacío>")) {
                System.out.println(cboNotaDebito.getSelectedIndex() + " " + cboNotaDebito.getSelectedItem().toString());
                try {
                    CargarInformacionND();
                    NotaDebitoTemp = Integer.parseInt(cboNotaDebito.getSelectedItem().toString());
                } catch (NumberFormatException e) {
                    UtilTable.LimpiarTabla(tblDetallesND);
                    ObjetoVacioCombo();
                }
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_cboNotaDebitoItemStateChanged

    private void jTable1SelectionChanged(ListSelectionEvent e) {
        if (!btnCancelar.isEnabled()) {

            if (UtilTable.isAnyoneSelected(tblDetallesND)) {
                try {
                    CargarInformacionDetalleND(tblDetallesND.getSelectedRow());
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error Formateo Numerico", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dlgNotaDebito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dlgNotaDebito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dlgNotaDebito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dlgNotaDebito.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                dlgNotaDebito dialog = new dlgNotaDebito(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton btnAgregar;
    private static javax.swing.JButton btnAnular;
    private static javax.swing.JButton btnCancelar;
    private static javax.swing.JButton btnEliminar;
    private static javax.swing.JButton btnGuardar;
    private static javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnNotaDebito;
    private static javax.swing.JButton btnPreview;
    private static javax.swing.JComboBox<String> cboNotaDebito;
    private static javax.swing.JEditorPane ediInfoDetalle;
    private static javax.swing.JEditorPane ediInfoND;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private static javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JLabel lblEstadoND;
    private javax.swing.JLabel lblSubTotal;
    private javax.swing.JLabel lblTitulo;
    private static javax.swing.JLabel lblTotal;
    private javax.swing.JTable tblDetallesND;
    // End of variables declaration//GEN-END:variables

    public static void CargarCombo() {
        MontoTotalND = 0;

        cboNotaDebito.removeAllItems();
        if (isNDCliente) {
            notadDebito = new ArrayList<>();
            notadDebito.add(notaDebitoBean.findById(NotaDebitoParam));
            if (NotaDebitoParam > 0) {
                cboNotaDebito.addItem("" + NotaDebitoParam);
                cboNotaDebito.setSelectedItem("" + NotaDebitoParam);
            }
            cboNotaDebito.setEnabled(false);
        } else {
            notadDebito = notaDebitoBean.FindAll(idRegistro);
            if (!notadDebito.isEmpty()) {
                notadDebito.stream().forEach((nd) -> {
                    cboNotaDebito.addItem("" + nd.getNotaDebito());
//                    if (cboNotaDebito.getItemCount() > 1) {
                        cboNotaDebito.setSelectedItem("" + nd.getNotaDebito());
//                    }
                });
            }
            cboNotaDebito.setEnabled(true);
        }

        if (cboNotaDebito.getItemCount() == 0) {
            cboNotaDebito.addItem("<Vacío>");
            cboNotaDebito.setEnabled(false);
            BotonesActivos(false);
            btnImprimir.setEnabled(false);
            btnPreview.setEnabled(false);
            btnAnular.setEnabled(false);
            PonerEnEspera();
        }
        BotonesAccion(false);
        lblTotal.setText("C$ " + String.format("%,.2f", MontoTotalND));
    }

    private void ObjetoVacioCombo() {
        if (cboNotaDebito.getSelectedItem().equals("<Vacío>")) {
            cboNotaDebito.setEnabled(false);
            BotonesActivos(false);
        }
    }

    private void LlamarDetalles(Notadebito notaD) {
        try {
            if (!listaDetalles.isEmpty()) {
                listaDetalles.clear();
            }
        } catch (NullPointerException e) {
        }

        DefaultTableModel modelo = (DefaultTableModel) tblDetallesND.getModel();
        UtilTable.LimpiarTabla(modelo);
        listaDetalles = detalleNotaDebitoBean.FindAll(notaD.getNotaDebito());

        double MontoND = 0;

        for (Detallenotadebito detalleND : listaDetalles) {
            modelo.addRow(new Object[]{
                detalleND.getIdDetalleNotaDebito(),
                detalleND.getDetalle(),
                detalleND.getMonto(),
                detalleND.getUsuarioByUserCreacion().getIdUsuario(),
                detalleND.getFechaCreacion(),
                detalleND.getUsuarioByUserModificacion().getIdUsuario(),
                detalleND.getFechaModificacion(),
                detalleND.getNotadebito().getNotaDebito()
            });
            MontoND = MontoND + detalleND.getMonto();
        }
        if (modelo.getRowCount() > 0) {
        } else {
            ediInfoDetalle.setText("<br><br><br><br><br><br><strong><center>--Información no disponible--");
        }
        lblSubTotal.setText("C$ " + String.format("%,.2f", MontoND));
        if (!notaD.getEstado().equals("Anulada") && !notaD.getEstado().equals("Pagada")) {
            MontoTotalND = MontoTotalND + MontoND;
        }
    }

    private void InsertarValoresPorDefecto() {
        DefaultTableModel modelo = (DefaultTableModel) tblDetallesND.getModel();
        UtilTable.LimpiarTabla(modelo);
        modelo.addRow(new Object[]{0, "Formatos y Copias", 0, SessionHelper.usuario.getIdUsuario(), new Date(), SessionHelper.usuario.getIdUsuario(), new Date(), NotaDebitoTemp});
        modelo.addRow(new Object[]{0, "TSIM y SPE", 0, SessionHelper.usuario.getIdUsuario(), new Date(), SessionHelper.usuario.getIdUsuario(), new Date(), NotaDebitoTemp});
        modelo.addRow(new Object[]{0, "Permisos MAGFOR", 0, SessionHelper.usuario.getIdUsuario(), new Date(), SessionHelper.usuario.getIdUsuario(), new Date(), NotaDebitoTemp});
        modelo.addRow(new Object[]{0, "Exoneracion", 0, SessionHelper.usuario.getIdUsuario(), new Date(), SessionHelper.usuario.getIdUsuario(), new Date(), NotaDebitoTemp});
        modelo.addRow(new Object[]{0, "Inspección IPSA", 0, SessionHelper.usuario.getIdUsuario(), new Date(), SessionHelper.usuario.getIdUsuario(), new Date(), NotaDebitoTemp});
    }

    private void InsertarValorTabla() {
        DefaultTableModel modelo = (DefaultTableModel) tblDetallesND.getModel();
        modelo.addRow(new Object[]{0, "Descripción del Detalle ", 0, SessionHelper.usuario.getIdUsuario(), new Date(), SessionHelper.usuario.getIdUsuario(), new Date(), NotaDebitoTemp});
    }

    private static void BotonesActivos(boolean b) {
        btnAgregar.setEnabled(b);
        btnEliminar.setEnabled(b);
        btnGuardar.setEnabled(b);
        btnCancelar.setEnabled(b);
        jMenuItem1.setEnabled(b);
    }

    private static void BotonesAccion(boolean b) {
        btnGuardar.setEnabled(b);
        btnCancelar.setEnabled(b);
    }

    private void CargarInformacionND() {
        Notadebito nd = notadDebito.get(cboNotaDebito.getSelectedIndex());
        lblEstadoND.setText("<html><Strong>Estado: <U>" + nd.getEstado().toUpperCase());
        String Informacion = "Fecha de Creacion: <strong>" + nd.getFechaCreacion()
                + "</strong> <br>   Usuario Creador: <strong>" + nd.getUsuarioByUserCreacion().getIdUsuario()
                + "</strong> <br><br>   Ultima Modificacion: <strong>" + nd.getFechaModificacion()
                + "</strong> <br>   Usuario que Modifico: <strong>" + nd.getUsuarioByUserModificacion().getIdUsuario()
                + "</strong>";

        if (nd.getEstado().equals("Generada")) {
            btnImprimir.setEnabled(true);
            btnPreview.setEnabled(true);
            TablaEditable(true);
            btnAnular.setEnabled(false);
            BotonesAccion(false);
            btnAgregar.setEnabled(true);
            btnEliminar.setEnabled(true);
            jMenuItem1.setEnabled(true);
        } else if (nd.getEstado().equals("Impresa")) {
            Informacion = Informacion + "<br><br>Fecha de Impresion: <strong>" + nd.getFechaImpresion()
                    + "</strong> <br> Usuario que imprimió: <strong>" + nd.getUsuarioByUserImpresion().getIdUsuario()
                    + "</strong>";
            BotonesActivos(false);
            TablaEditable(false);
            btnAnular.setEnabled(true);
            btnImprimir.setEnabled(true);
            btnPreview.setEnabled(false);

        } else if (nd.getEstado().equals("Anulada")) {
            System.out.println("ELSE");
            Informacion = Informacion + "<br><br>Fecha de Impresion: <strong>" + nd.getFechaImpresion()
                    + "</strong> <br> Usuario que imprimió: <strong>" + nd.getUsuarioByUserImpresion().getIdUsuario()
                    + "</strong>";

            regAnulados = registrosAnuladosBean.FindById("Nota de Débito", nd.getNotaDebito());
            if (regAnulados != null) {
                Informacion = Informacion + "<br><br>Fecha de Anulacion: <strong>" + regAnulados.getFechaAnula()
                        + "</strong> <br>   Usuario Anulo: <strong>" + regAnulados.getUsuario().getIdUsuario()
                        + "</strong> <br>   Motivo de Anulacion: <strong>" + regAnulados.getMotivo();
                btnAnular.setEnabled(false);
                BotonesActivos(false);
                TablaEditable(false);
            }
        } else if (nd.getEstado().equals("Pagada")) {
            Informacion = Informacion + "<br><br>Fecha de Impresion: <strong>" + nd.getFechaImpresion()
                    + "</strong> <br> Usuario que imprimió: <strong>" + nd.getUsuarioByUserImpresion().getIdUsuario()
                    + "</strong>";
            btnAnular.setEnabled(false);
            btnPreview.setEnabled(false);
            BotonesActivos(false);
            TablaEditable(false);
        }
        if (EstadoCR.equals("Impresa con ND")) {
            DesabilitarTodo();
        }
        LlamarDetalles(nd);
        ediInfoND.setText(Informacion);
    }

    private void CargarInformacionDetalleND(int SelectedRow) {
        String Informacion = "<br>Fecha de Creacion: <strong>" + (Date) tblDetallesND.getValueAt(SelectedRow, 4)
                + "</strong> <br>   Usuario Creador: <strong>" + tblDetallesND.getValueAt(SelectedRow, 3).toString()
                + "</strong> <br><br>   Ultima Modificacion: <strong>" + (Date) tblDetallesND.getValueAt(SelectedRow, 6)
                + "</strong> <br>   Usuario que Modifico: <strong>" + tblDetallesND.getValueAt(SelectedRow, 5).toString()
                + "</strong>";
        ediInfoDetalle.setText(Informacion);
    }

    private static void PonerEnEspera() {
        ediInfoND.setText("<br><br><br><br><br><br><strong><center>--Información no disponible--");
        ediInfoDetalle.setText("<br><br><br><br><br><br><strong><center>--Información no disponible--");
        Document doc = ediInfoDetalle.getDocument();
        SimpleAttributeSet atrib = new SimpleAttributeSet(((StyledDocument) doc).getCharacterElement(0).getAttributes());
        StyleConstants.setAlignment(atrib, StyleConstants.ALIGN_CENTER);
    }

    private boolean ValidarFilasTabla() {
        return tblDetallesND.getRowCount() > 0;
    }

    private boolean GuardarNotaDebito() {
        boolean Guardo;
        notaDebito = new Notadebito();
        notaDebito.setNotaDebito(notaDebitoBean.NotaDebitoConsecutiva());
        NotaDebitoTemp = notaDebito.getNotaDebito();
        UltimoIdGuardado = "" + NotaDebitoTemp;
//        notaDebito.setCuentaRegistro(idRegistro);
        if (isNDCliente) {
            notaDebito.setFactura(null);
            notaDebito.setCliente(new ClienteBean().FindById(idRegistro));
        } else {
            notaDebito.setFactura(facturaBean.FindById(idRegistro));
            notaDebito.setCliente(null);
        }
        notaDebito.setEstado("Generada");
        notaDebito.setFechaCreacion(new Date());
        notaDebito.setFechaModificacion(new Date());
        notaDebito.setUsuarioByUserCreacion(SessionHelper.usuario);
        notaDebito.setUsuarioByUserModificacion(SessionHelper.usuario);
        try {
            Dbcontext.guardar(notaDebito);
            NotaDebitoParam = notaDebito.getNotaDebito();
            Guardo = true;
        } catch (Exception e) {
            Guardo = false;
            Mensajes.ErrorDesconocido(this, e.getMessage());
        }
        return Guardo;
    }

    private boolean GuardarDetallesNotaDebito() {
        boolean Guardo = false;
        for (int i = 0; i < tblDetallesND.getRowCount(); i++) {
            detalleNotaDebito = new Detallenotadebito();
            detalleNotaDebito.setNotadebito(notaDebitoBean.findById(NotaDebitoTemp));
            detalleNotaDebito.setDetalle(tblDetallesND.getValueAt(i, 1).toString());
            detalleNotaDebito.setMonto(Double.parseDouble(tblDetallesND.getValueAt(i, 2).toString()));
            detalleNotaDebito.setUsuarioByUserCreacion(SessionHelper.usuario);
            detalleNotaDebito.setFechaCreacion(new Date());
            detalleNotaDebito.setUsuarioByUserModificacion(SessionHelper.usuario);
            detalleNotaDebito.setFechaModificacion(new Date());
            try {
                Dbcontext.guardar(detalleNotaDebito);
                Guardo = true;
            } catch (Exception e) {
                Guardo = false;
                Mensajes.ErrorDesconocido(this, e.getMessage());
                break;
            }

        }
        return Guardo;
    }

    private boolean GuardarDetallesNotaDebito(Detallenotadebito detalleNotaDebito) {
        boolean Guardo;
        Detallenotadebito dnb = detalleNotaDebito;
        dnb.setNotadebito(notaDebitoBean.findById(NotaDebitoTemp));
        dnb.setUsuarioByUserCreacion(SessionHelper.usuario);
        dnb.setFechaCreacion(new Date());
        dnb.setUsuarioByUserModificacion(SessionHelper.usuario);
        dnb.setFechaModificacion(new Date());
        try {
            Dbcontext.guardar(dnb);
            Guardo = true;
        } catch (Exception e) {
            Guardo = false;
            Mensajes.ErrorDesconocido(this, e.getMessage());

        }
        return Guardo;
    }

    private boolean EditarDetallesNotaDebito() {
        boolean Guardo = false;
        List<Detallenotadebito> lista = new ArrayList<>();
        for (int i = 0; i < tblDetallesND.getRowCount(); i++) {
            Detallenotadebito det = new Detallenotadebito();
            det.setIdDetalleNotaDebito(Integer.parseInt(tblDetallesND.getValueAt(i, 0).toString()));
            det.setDetalle(tblDetallesND.getValueAt(i, 1).toString());
            det.setMonto(Double.parseDouble(tblDetallesND.getValueAt(i, 2).toString()));
            det.setUsuarioByUserCreacion(usuarioBean.FindById(tblDetallesND.getValueAt(i, 3).toString()));
            det.setFechaCreacion((Date) tblDetallesND.getValueAt(i, 4));
            det.setUsuarioByUserModificacion(usuarioBean.FindById(tblDetallesND.getValueAt(i, 5).toString()));
            det.setFechaModificacion((Date) tblDetallesND.getValueAt(i, 6));
            det.setNotadebito(notaDebitoBean.findById(Integer.parseInt(tblDetallesND.getValueAt(i, 7).toString())));
            lista.add(det);
        }

        List<Detallenotadebito> listaTemporal = new ArrayList<>(); // Esta lista temporal sera para los que no se guarden
        //Recorro los que tienen Id 0 porque significa que se van a guardar
        System.out.println("================DETALLES====================================================");
        for (Detallenotadebito detalleLista : lista) {
            if (detalleLista.getIdDetalleNotaDebito() == 0) {
                Guardo = GuardarDetallesNotaDebito(detalleLista);
                System.out.println("Se Guardo el Registro: " + detalleLista.getIdDetalleNotaDebito());
            } else {
                listaTemporal.add(detalleLista);
            }
        }
        lista.clear();
        System.out.println("Lista temporal size: " + listaTemporal.size());
        lista = new ArrayList<>(listaTemporal);
        listaTemporal.clear();

        System.out.println("Lista Tabla size: " + lista.size());
        for (Detallenotadebito detalleListaDetalle : listaDetalles) {
            for (Detallenotadebito detalleLista : lista) {
                if (detalleLista.getIdDetalleNotaDebito().toString().equals(detalleListaDetalle.getIdDetalleNotaDebito().toString())) {
                    if (!detalleLista.getDetalle().equals(detalleListaDetalle.getDetalle())
                            || detalleLista.getMonto() != detalleListaDetalle.getMonto()) {
//Id Iguales, Detalle o Monto con Algun Cambio
                        Guardo = ModificarDetalleNotaDebito(detalleListaDetalle, detalleLista);
                        System.out.println("Se modifico el Registro: " + detalleLista.getIdDetalleNotaDebito());
                        listaTemporal.add(detalleListaDetalle);
                        break;
                    } else {
                        listaTemporal.add(detalleListaDetalle);
                    }
                }
                //Aqui iba el ELSE para guardar pero ya no es necesario

            }

        }

        Collection<Detallenotadebito> listOne = new ArrayList<>(listaDetalles);
        Collection<Detallenotadebito> listTwo = new ArrayList<>(listaTemporal);

        Collection<Detallenotadebito> similar = new HashSet<>(listOne);
        Collection<Detallenotadebito> different = new HashSet<>();
        different.addAll(listOne);
        different.addAll(listTwo);

        similar.retainAll(listTwo);
        different.removeAll(similar);
        System.out.printf("One:%s%nTwo:%s%nSimilar:%s%nDifferent:%s%n", listOne, listTwo, similar, different);
        listaDetalles.clear();
        listaDetalles = new ArrayList<>(different);

        for (int i = 0; i < listaDetalles.size(); i++) {
            if (!listaDetalles.isEmpty()) {
                Guardo = EliminarDetalleNotaDebito(listaDetalles.get(i));
                System.out.println("Se Elimino el Registro " + listaDetalles.get(i).getIdDetalleNotaDebito());
            }

        }
        if (different.isEmpty()) { // TEMPORAL PARA PODER IR A DORMIR
            Guardo = true;
        }
        listaTemporal.clear();
        lista.clear();
        listaDetalles.clear();
        return Guardo;
    }

    private boolean ModificarDetalleNotaDebito(Detallenotadebito actual, Detallenotadebito modificado) {
        boolean Listo;
//        modificado.setIdDetalleNotaDebito(actual.getIdDetalleNotaDebito());
        modificado.setNotadebito(actual.getNotadebito());
//        modificado.setDetalle(actual.getDetalle());
//        modificado.setMonto(actual.getMonto());
        modificado.setUsuarioByUserCreacion(actual.getUsuarioByUserCreacion());
        modificado.setFechaCreacion(actual.getFechaCreacion());
        modificado.setUsuarioByUserModificacion(SessionHelper.usuario);
        modificado.setFechaModificacion(new Date());

        try {
            Dbcontext.actualizar(modificado);
            Listo = true;
        } catch (Exception e) {
            Mensajes.ErrorDesconocido(this, e.getMessage());
            Listo = false;
        }
        return Listo;
    }

    private boolean EliminarDetalleNotaDebito(Detallenotadebito detalleND) {
        boolean Listo;
        try {
            Dbcontext.eliminar(detalleND);
            Listo = true;
        } catch (Exception e) {
            Mensajes.ErrorDesconocido(this, e.getMessage());
            Listo = false;
        }
        return Listo;
    }

    private boolean ValidarValoresVacios() {
        boolean NoVacio = true;
        for (int i = 0; i < tblDetallesND.getRowCount(); i++) {
            try {
                if (tblDetallesND.getValueAt(i, 1).toString().equals("")
                        || tblDetallesND.getValueAt(i, 2).toString().equals("")) {
                    NoVacio = false;
                    break;
                }
                if (Double.parseDouble(tblDetallesND.getValueAt(i, 2).toString()) == 0) {
                    NoVacio = false;
                    break;
                }
            } catch (NullPointerException e) {
                NoVacio = false;
                System.out.println(e.getMessage());
            }

        }
        return NoVacio;
    }

    private void DesabilitarTodo() {
        BotonesActivos(false);
        btnPreview.setEnabled(false);
        btnNotaDebito.setEnabled(false);
        btnAnular.setEnabled(false);
        jMenuItem1.setEnabled(false);
        TablaEditable(false);
    }

    private void Imprimir(boolean isVistaPrevia) {

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(new String[]{"detalle", "parcial", "monto"});

        Factura f = null;
        Cliente c;
        Agencia a = null;
        if (isNDCliente) {
            c = (new ClienteBean().FindById(idRegistro));
        } else {
            f = (new FacturasBean().FindById(idRegistro));
            c = (new ClienteBean().FindById(f.getCliente().getIdCliente()));
            a = (new AgenciaBean().FindById(f.getAgencia().getIdAgencia()));

        }

        Notadebito nd = notadDebito.get(cboNotaDebito.getSelectedIndex());

        for (Detallenotadebito detalle : detalleNotaDebitoBean.FindAll(nd.getNotaDebito())) {
            modelo.addRow(new Object[]{detalle.getDetalle().toUpperCase(), "", new Double("" + detalle.getMonto())});
        }

        Reporte reporte = new Reporte("RptNotaDebito.jasper");
        reporte.AddParameter("cliente", c.getRazonSocial().toUpperCase());
        reporte.AddParameter("direccion", c.getDireccion().toUpperCase());
        if (isVistaPrevia) {
            reporte.AddParameter("ruc", "VISTA PREVIA.");
        } else {
            reporte.AddParameter("ruc", c.getRuc());
        }
        reporte.AddParameter("fecha", new Date());

        if (isNDCliente) {
            reporte.AddParameter("aduana", "");
            reporte.AddParameter("cuentaRegistro", null);
            reporte.AddParameter("tipo", "");
            reporte.AddParameter("declaracion", "");
        } else {
            reporte.AddParameter("aduana", a.getNombre().toUpperCase());
            reporte.AddParameter("cuentaRegistro", f.getCuentaRegistro());
            reporte.AddParameter("tipo", f.getTipoTransaccion() ? "IMPORTACION" : "EXPORTACION");
            reporte.AddParameter("declaracion", "#" + f.getNumeroDeclaracion().toUpperCase());
        }

        reporte.AddParameter("notadebitono", nd.getNotaDebito());
        if (nd.getEstado().equals("Generada")) {
            reporte.AddParameter("fecha", new Date());
            nd.setEstado("Impresa");
            nd.setUsuarioByUserImpresion(SessionHelper.usuario);
            nd.setFechaImpresion(new Date());
        } else {
            reporte.AddParameter("fecha", nd.getFechaImpresion());
        }
        reporte.AddDataSource(modelo);
        reporte.setZoom(1f);

        if (!isVistaPrevia) {
            try {
                Dbcontext.actualizar(nd);
                reporte.Show();
            } catch (Exception e) {
                e.printStackTrace();
                Mensajes.ErrorDesconocido(this, e.getMessage());
            }
        } else {
            reporte.Show();
        }
        CargarCombo();
    }

    private void TablaEditable(boolean b) {
        tblDetallesND.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "IdDetalleNotaDebito", "Concepto", "Cantidad", "userCreacion", "FechaCreacion", "userModificacion", "FechaModificacion", "CuentaRegistro"
                }
        ) {
            Class[] types = new Class[]{
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean[]{
                false, b, b, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblDetallesND);
        if (tblDetallesND.getColumnModel().getColumnCount() > 0) {
            tblDetallesND.getColumnModel().getColumn(0).setMinWidth(0);
            tblDetallesND.getColumnModel().getColumn(0).setPreferredWidth(0);
            tblDetallesND.getColumnModel().getColumn(0).setMaxWidth(0);
            tblDetallesND.getColumnModel().getColumn(1).setPreferredWidth(120);
            tblDetallesND.getColumnModel().getColumn(3).setMinWidth(0);
            tblDetallesND.getColumnModel().getColumn(3).setPreferredWidth(0);
            tblDetallesND.getColumnModel().getColumn(3).setMaxWidth(0);
            tblDetallesND.getColumnModel().getColumn(4).setMinWidth(0);
            tblDetallesND.getColumnModel().getColumn(4).setPreferredWidth(0);
            tblDetallesND.getColumnModel().getColumn(4).setMaxWidth(0);
            tblDetallesND.getColumnModel().getColumn(5).setMinWidth(0);
            tblDetallesND.getColumnModel().getColumn(5).setPreferredWidth(0);
            tblDetallesND.getColumnModel().getColumn(5).setMaxWidth(0);
            tblDetallesND.getColumnModel().getColumn(6).setMinWidth(0);
            tblDetallesND.getColumnModel().getColumn(6).setPreferredWidth(0);
            tblDetallesND.getColumnModel().getColumn(6).setMaxWidth(0);
            tblDetallesND.getColumnModel().getColumn(7).setMinWidth(0);
            tblDetallesND.getColumnModel().getColumn(7).setPreferredWidth(0);
            tblDetallesND.getColumnModel().getColumn(7).setMaxWidth(0);
        }
    }

}
